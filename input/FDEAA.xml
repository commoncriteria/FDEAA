<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="../transforms/pp2html.xsl"?>
<?xml-model href="https://github.com/commoncriteria/transforms/raw/master/schemas/CCProtectionProfile.rng" type="application/xml" schematypens="http://relaxng.org/ns/structure/1.0"?>


<!-- for a PP-module -->
<!-- <?xml-model href="../transforms/schemas/CCModule.rng" type="application/xml" 
                  schematypens="http://relaxng.org/ns/structure/1.0"?>
-->

<!-- For PP or cPP -->
<!-- Name of the TOE product  -->
<!-- Plural name of the TOE product (optional)  -->
<!-- Whether to use boilerplate text by default (can be disabled in sections) -->
<!-- A short name for the PP (e.g. App or MDF) -->
<PP target-product="Full Drive Encryption - AA" 
    xmlns="https://niap-ccevs.org/cc/v1"
    xmlns:cc="https://niap-ccevs.org/cc/v1"
    xmlns:sec="https://niap-ccevs.org/cc/v1/section"
    xmlns:h="http://www.w3.org/1999/xhtml" 
    boilerplate='yes'>
<cPP/>

<!-- for FP -->
<!--
<Package name="TLS"                                   
    xmlns="https://niap-ccevs.org/cc/v1"
    xmlns:h="http://www.w3.org/1999/xhtml"
    xmlns:sec="https://niap-ccevs.org/cc/v1/section"
-->

<!-- For a PP-Module 
<Module
    name="Widget Clients"                              # Name of the Module  
    xmlns="https://niap-ccevs.org/cc/v1"               # Some html magic
    xmlns:h="http://www.w3.org/1999/xhtml"             # uses the "h" namespace for inline HTML
    xmlns:sec="https://niap-ccevs.org/cc/v1/section"   # The "sec" namespace for sections is available
    target-product="Widget"                            # Name of the TOE product
    target-products="Widgets"                          # Plural name of the TOE product (optional)
    boilerplate="yes"                                  # Whether to use boilerplate text by default (can be disabled in sections)
    short="Wid">                                       # A short name for the PP (e.g. App or MDF)
-->

  <!-- PPReference (all documents) -->
  <PPReference>
    <ReferenceTable>
      <PPTitle>collaborative Protection Profile for Full Drive Encryption – Authorization Acquisition</PPTitle>
      <PPVersion>2.1</PPVersion>
      <PPAuthor>National Information Assurance Partnership</PPAuthor>
      <PPPubDate>2025-05-01</PPPubDate>
      <Keywords>Full Drive Encryption – Authorization Acquisition</Keywords>               <!-- This field is unused and optional -->
    </ReferenceTable>
  </PPReference>

<!-- Revision History (all documents) -->
  <RevisionHistory>
    <entry>
      <version>Round 1</version>
      <date>2015-04-23</date>
      <subject>First draft of version 1.0 for comment</subject>
    </entry>
    <entry>
      <version>1.0</version>
      <date>2015-08-14</date>
      <subject>Release - first version released</subject>
    </entry>
    <entry>
      <version>2.0</version>
      <date>2024-03-28</date>
      <subject>Updated for CC:2022, or whatever</subject>
    </entry>
    <entry>
        <version>2.0</version>
        <date>2025-04-11</date>
        <subject>Updated for CC:2022, reviewing and applying modifications to the PP</subject>
      </entry>
  </RevisionHistory>



<!-- PP Preferences (all documents) -->
<pp-preferences>
     <!-- Indicate that audit events are defined with their SFRs -->
	 <!-- All new documents should do it this way. This will become the default, if it hasn't already.  -->
	 <!-- And this preference might not even be necessary. I should test it. -->
     <audit-events-in-sfrs/>         
	 
	 <!-- Indicates that audit events will be displayed along the associated SFR in the published document -->
	 <!-- rather than in an audit table. -->
<!--     <display-audit-with-sfrs/>     -->

	 <!-- Indicates that the document is using CC:2022. -->
	 <!-- This setting has already been deprecated, but is still allowed for backward compatiblity -->
	 <!-- New douments shoudl use the <CClaimsInfo> element to specify CC:2022 --> 
 
  </pp-preferences>


  <!-- Introduction (all documents) -->
  <!-- Introduction (all documents) -->
  <section title="Introduction" id="sec-intro">

    <!-- PP or TOE Overview -->

    <section title="PP Overview" id="sec-ppoverview">
        <h:p>
		The purpose of the first set of Collaborative Protection Profiles (cPPs) for Full Drive Encryption (FDE): Authorization Acquisition (AA) and Encryption Engine (EE) is to provide requirements for Data-at-Rest protection for a lost device that contains storage. These cPPs allow FDE solutions based in software and/or hardware to meet the requirements. The form factor for a storage device may vary, but could include: system hard drives/solid state drives in servers, workstations, laptops, mobile devices, tablets, and external media. A hardware solution could be a Self-Encrypting Drive or other hardware-based solutions; the interface (USB, SATA, etc.) used to connect the storage device to the host machine is outside the scope of this cPP.
        </h:p><h:p>
        Full Drive Encryption encrypts all data (with certain exceptions) on the storage device and permits access to the data only after successful authorization to the FDE solution. The exceptions include the necessity to leave a portion of the storage device (the size may vary based on implementation) unencrypted for such things as the Master Boot Record (MBR) or other AA/EE pre-authentication software. These FDE cPPs interpret the term “full drive encryption” to allow FDE solutions to leave a portion of the storage device unencrypted so long as it contains plaintext user or plaintext authorization data.
        </h:p><h:p>
        Since the FDE cPPs support a variety of solutions, two cPPs describe the requirements for the FDE components shown in Figure 1.  
        </h:p>
        
        <h:p><figure entity="images/fde-components.png" title="FDE Components" id="toe"/></h:p>

        <h:p>The FDE cPP - Authorization Acquisition describes the requirements for the Authorization Acquisition piece and details the security requirements and assurance activities necessary to interact with a user and result in the availability of sending a Border Encryption Value (BEV)to the Encryption Engine.</h:p>
        <h:p>The FDE cPP - Encryption Engine describes the requirements for the Encryption Engine piece and details the necessary security requirements and assurance activities for the actual encryption/decryption of the data by the DEK. Each cPP will also have a set of core requirements for management functions, proper handling of cryptographic keys, updates performed in a trusted manner, audit and self-tests. </h:p>
        <h:p>This TOE description defines the scope and functionality of the Authorization Acquisition, and
            the Security Problem Definition describes the assumptions made about the operating
            environment and the threats to the AA that the cPP requirements address</h:p>
	</section>  <!-- PP Overview -->
	
	<!-- CC and Tech terms.  -->
	<!-- CC terms are auto-generated -->
	<!-- All tech terms are generated from the list below. -->
	<!-- You should add and delete tech terms as required by the technology type. -->
	<tech-terms>
	  <!-- To remove an irrlevant CC term from the document, use the <suppress> element -->
      <suppress>Distributed TOE</suppress>   
      <term abbr='AA' full="Authorization Acquisition"></term>
      <term full="Advanced Encryption Standard" abbr="AES"></term>
      <term full="Assurance">Grounds for confidence that a TOE meets the SFRs [CC1].</term>
      <term full="Authorization Factor">A value that a user knows, has, or is (e.g. password, token, etc.)
        submitted to the TOE to establish that the user is in the community
        authorized to use the hard disk. This value is used in the derivation or
        decryption of the BEV and eventual decryption of the DEK. Note
        that these values may or may not be used to establish the particular
        identity of the user. </term>
        
      <term abbr='BEV' full="Border Encryption Valu">A value passed from the AA to the EE intended to link the key chains
        of the two components.</term>
      <term abbr='BIOS' full="Basic Input Output System"></term>
      


      <term abbr='CBC' full="Cipher Block Chaining"></term>
      <term abbr='CC' full="Common Criteria"></term>
      <term abbr='CCM' full="Counter with CBC-Message Authentication Code"></term>
      <term abbr='CEM' full="Common Evaluation Methodology"></term>
      <term abbr='CPP' full="Collaborative Protection Profile"></term>
      <term abbr='DEK' full="Data Encryption Key">A key used to encrypt data-at-rest.</term>
      <term abbr='DRBG' full="Deterministic Random Bit Generator"></term>
      <term abbr='DSS' full="Digital Signature Standard"></term>
      <term abbr='ECC' full="Elliptic Curve Cryptography"></term>
      <term abbr='ECDSA' full="Elliptic Curve Digital Signature Algorithm"></term>
      <term abbr='EE' full="Encryption Engine"></term>
      <term abbr='EEPROM' full="Electrically Erasable Programmable Read-Only Memory"></term>
      <term abbr='FIPS' full="Federal Information Processing Standards"></term>
      <term abbr='FDE' full="Full Drive Encryption">Refers to partitions of logical blocks of user accessible data as
        managed by the host system that indexes and partitions and an
        operating system that maps authorization to read or write data to blocks
        in these partitions. For the sake of this Security Program Definition
        (SPD) and cPP, FDE performs encryption and authorization on one
        partition, so defined and supported by the OS and file system jointly,
        under consideration. FDE products encrypt all data (with certain
        exceptions) on the partition of the storage device and permits access to
        the data only after successful authorization to the FDE solution. The
        exceptions include the necessity to leave a portion of the storage device
        (the size may vary based on implementation) unencrypted for such
        things as the Master Boot Record (MBR) or other AA/EE preauthentication software. These FDE cPPs interpret the term “full drive
        encryption” to allow FDE solutions to leave a portion of the storage
        device unencrypted so long as it contains no protected data.</term>
      <term abbr='FFC' full="Finite Field Cryptography"></term>
      <term abbr='GCM' full="Galois Counter Mode"></term>
      <term abbr='HMAC' full="Keyed-Hash Message Authentication Code"></term>
      <term abbr='HW' full="Hardware"></term>
      <term abbr='IEEE' full="Institute of Electrical and Electronics Engineers"></term>
      <term full="Host Platform">The local hardware and software the TOE is running on, and does not
        include any peripheral devices (e.g. USB devices) that may be
        connected to the local hardware and software.</term>
      <term full="Intermediate Key">A key used in a point between the initial user authorization and the
        DEK.</term>
      <term abbr='IT' full="Information Technology"></term>
      <term abbr='ITSEF' full="IT Security Evaluation Facility"></term>
      <term abbr='ISO/IEC' full="International Organization for Standardization / International Electrotechnical Commission"></term>
      <term abbr='IV' full="Initialization Vector"></term>
      <term abbr='KEK' full="Key Encryption Key">A key used to encrypt other keys, such as DEKs or storage that
        contains keys.</term>
        <term full="Key Chaining">The method of using multiple layers of encryption keys to protect data.
          A top layer key encrypts a lower layer key which encrypts the data;
          this method can have any number of layers.</term>
          <term full="Key Material">Key material is commonly known as critical security parameter (CSP)
            data, and also includes authorization data, nonces, and metadata.</term>
      <term full="Key Sanitization">A method of sanitizing encrypted data by securely overwriting the key
          that was encrypting the data.</term>
      <term abbr='KMD' full="Key Management Description"></term>
      <term abbr='KRK' full="Key Release Key">A key used to release another key from storage, it is not used for the
        direct derivation or decryption of another key.</term>
      <term abbr='MBR' full="Master Boot Record"></term>
      <term abbr='NIST' full="National Institute of Standards and Technology"></term>
      <term full="Non-Volatile Memory">A type of computer memory that will retain information without
        power. 
        </term>
      <term abbr='OS' full="Operating System">Software which runs at the highest privilege level and can directly
        control hardware resources.</term>
      <term abbr='PBKDF' full="Password-Based Key Derivation Function"></term>
      <term full="Powered-Off State">The device has been shut down.</term>
      <term full="Protected Data">This refers to all data on the storage device with the exception of a
        small portion required for the TOE to function correctly. It is all space
        on the disk a user could write data to and includes the operating
        system, applications, and user data. Protected data does not include the
        Master Boot Record or Pre-authentication area of the drive – areas of
        the drive that are necessarily unencrypted.</term>
      <term abbr='PRF' full="Pseudo Random Function"></term>
      <term abbr='RBG' full="Random Bit Generator"></term>
      <term abbr='RNG' full="Random Number Generator"></term>
      <term abbr='RSA' full="Rivest Shamir Adleman Algorithm"></term>
      <term abbr='SAR' full="Security Assurance Requirements"></term>
      <term abbr='SED' full="Self-Encrypting Drive"></term>
      <term abbr='SHA' full="Secure Hash Algorithm"></term>
      <term abbr='SFR' full="Security Functional Requirements"></term>
      <term abbr='ST' full="Security Target"></term>
      <term abbr='SPD' full="Security Problem Definition"></term>
      <term abbr='SPI' full="Serial Peripheral Interface"></term>
      <term full="Submask">A submask is a bit string that can be generated and stored in a number
        of ways.</term>
      <term abbr='TOE' full="Target of Evaluation">A set of software, firmware and/or hardware possibly accompanied by
        guidance. [CC1]</term>
      <term abbr='TPM' full="Trusted Platform Module"></term>
      <term abbr='TSF' full="TOE Security Functionality"></term>
      <term abbr='TSS' full="TOE Summary Specification"></term>
      <term abbr='USB' full="Universal Serial Bus"></term>
      <term abbr='XOR' full="Exclusive or"></term>
      <term abbr='XTS' full="XEX (XOR Encrypt XOR) Tweakable Block Cipher with Ciphertext Stealing"></term>

      
    </tech-terms>    

	<!-- Other sections can be added here. -->
	<!-- Commen examples include Scope of Document, Intended Audiance, Compliant Targets of Evaluation,
	     TOE Boundary, TOE Operational Environment, and Roles. These sections can also be included in the
		 TOE/PP Overview aove. -->
     <section title="Implementation" id="sec-TOEimplementation">
      <h:p>
        Full Drive Encryption solutions vary with implementation and vendor combinations. 
      </h:p>
      <h:p>Therefore, vendors will evaluate products that provide both components of the Full Disk
        Encryption Solution (AA and EE) against both cPPs – could be done in a single evaluation
        with one ST. A vendor that provides a single component of a FDE solution would only evaluate
        against the applicable cPP. The FDE cPP is divided into two documents to allow labs to
        independently evaluate solutions tailored to one cPP or the other. When a customer acquires
        an FDE solution, they will either obtain a single vendor product that meets the AA + EE cPPs
        or two products, one of which meets the AA and the other of which meets the EE cPPs.</h:p>
        <h:p>The table below illustrates a few examples for certification</h:p>
        
        <h:head><h:b><ctr ctr-type="Table" pre="Table" id="atref-mandatory">: Examples of cPP Implementations</ctr></h:b></h:head>			
        <h:tr class="header"><h:td>Event</h:td><h:td/></h:tr>    	
  <h:table border='1'>
      <h:tr>
        <h:th>Implementation</h:th>
        <h:th>cPP</h:th>
        <h:th>Description</h:th>
      </h:tr>
          <h:tr>
          
        <h:th>Host</h:th>
        <h:th>AA</h:th>
        <h:th>Host software provides the interface to a self-encrypting drive</h:th>
      </h:tr>
      <h:tr>
        <h:th>Self-Encrypting Drive (SED)</h:th>
        <h:th>EE</h:th>
        <h:th>A self-encrypting drive used in combination with separate host
          software</h:th>
      </h:tr>
      <h:tr>
        <h:th>Software FDE</h:th>
        <h:th>AA + EE</h:th>
        <h:th>A software full drive encryption solution</h:th>
      </h:tr>
      <h:tr>
        <h:th>Hybrid</h:th>
        <h:th>AA + EE</h:th>
        <h:th>A single vendor’s combination of hardware (e.g. hardware encryption engine, cryptographic co-processor) and software</h:th>
      </h:tr>
  </h:table>

     </section>
     <section title="TOE Overview" id="sec-TOEoverview">
        <h:p>
          The Target of Evaluation (TOE) for this cPP (Authorization Acquisition) may be either a Host software solution that manages a HW Encryption Engine (e.g. a SED) or as part of a combined evaluation of this cPP and the Encryption Engine cPP for a vendor that is providing a solution that includes both components.
        </h:p>
        <h:p>The following sections provide an overview of the functionality of the FDE AA as well as the security capabilities.</h:p>

     
     <section title="Authorization Acquisition Introduction" id="sec-TOEauthorization-acquisition-introduction">
      <h:p>
      The Authorization Acquisition sends a Border Encryption Value (BEV), which could be a Key Encryption Key (KEK), a Key Releasing Key (KRK), or some other type of key to the Encryption Engine. The EE does not have to use this value directly as the key to decrypt or release the DEK. It may use it as part of a scheme that uses other intermediate keys to eventually protect the DEK. A KEK wraps other keys, notably the DEK or other intermediary keys which chain to the DEK. Key Releasing Keys (KRKs) authorize the EE to release either the DEK or other intermediary keys which chain to the DEK. Figure 2 illustrates the components within AA and its relationship with EE.
    </h:p>
    <h:p>
      Authorization factors may be unique to individual users or may be used by a group of individuals. In other words, the EE requires authorization factors from the AA to establish that the possessor of the authorization factor belongs to the community of users authorized to access information stored on the storage device (and does not require specific user authorization). Examples of authorization factors include, but are not limited to, passwords, passphrases, or randomly generated values stored on USB tokens or a pin to release a key on hardware storage media such as a Trusted Platform Module (TPM).
    </h:p>
    <section title="TOE Boundary" id="TOEboundary">
      <figure entity="images/fde-authorization_acquisition.png" title="Authorization Acquisition Details" id="toe"/>
    </section>
    <h:p>
      Authorization factors may be unique to individual users or may be used by a group of individuals. In other words, the EE requires authorization factors from the AA to establish that the possessor of the authorization factor belongs to the community of users authorized to access information stored on the storage device (and does not require specific user authorization). Examples of authorization factors include, but are not limited to, passwords, passphrases, or randomly generated values stored on USB tokens or a pin to release a key on hardware storage media such as a Trusted Platform Module (TPM).
    </h:p>
     </section>
     <section title="Authorization Acquisition Security Capabilities" id="sec-TOEauthorization-acquisition_security_capabilities">
     <h:p>
      The AA collects authorization factors which the EE uses to access data on the storage device and perform a variety of management functions. Depending on the type of authorization factor, the AA may condition them further. For example, it may apply an approved password-based key derivation function (e.g. PBKDF2) on passwords. An external token containing a randomly generated value of sufficient strength may require no further conditioning on the authorization factors. The AA may then combine one or more authorization factors in such a way that maintains the strength of both factors.
     </h:p><h:p>
     The AA serves as the main management interface to the EE. However, the EE may also offer management functionality. The requirements in the EE cPP address how the EE should handle these features. The management functionality may include the ability to send commands to the EE such as changing a DEK, setting up new users, managing KEKs and other intermediate keys, and performing a key sanitization (e.g. overwrite of the DEK). It may also forward commands that partition the drive for use by multiple users. However, this document defers the management of partitions and assumes that administrators will only provision and manage the data on whole drives.
     </h:p>
    </section>
    <section title="Interface/Boundary" id="sec-TOEInterface-Boundary">
      The interface and boundary between the AA and the EE will vary based on the implementation. If one vendor provides the entire FDE solution, then it is may choose to not implement an interface between the AA and EE components. If a vendor provides a solution for one of the components, then the assumptions below state that the channel between the two components is sufficiently secure. Although standards and specifications exist for the interface between AA and EE components, the cPP does not require vendors to follow the standards in this version.
    </section>
    </section>
    
    <section title="Compliant Targets of Evaluation" id="sec-TOEdescription">
      <section title="TOE Boundary" id="TOEboundary">
        <h:p>
        The environment in which the AA functions may differ depending on the boot stage of the platform in which it operates, see Figure 3. Depending on the solution’s architecture, aspects of provisioning, initialization, and authorization may be performed in the Pre-Boot environment, while encryption, decryption and management functionality are likely performed in the Operating System environment. In non-software solutions, encryption/decryption starts in Pre30 OS environment and continues into OS present environment.</h:p>
        <h:p>
          In the Operating System environment, the Authorization Acquisition has the full range of services available from the operating system (OS), including hardware drivers, cryptographic libraries, and perhaps other services external to the TOE.
        </h:p>
        <h:p>The Pre-Boot environment is much more constrained with limited capabilities. This environment turns on the minimum number of peripherals and loads only those drivers necessary to bring the platform from a cold start to executing a fully functional operating system with running applications.</h:p>
        <h:p>The AA TOE may include or leverage features and functions within the operational environment.</h:p>
        <figure entity="images/fde-operating-env.png" title="Operational Environment" id="toe-oe"/>
      </section>
      
    </section>  <!-- Compliant TOEs -->

	<!-- Use Cases (optional) -->
    <section title="Use Cases" id="sec-usecases">
      The use case for a product conforming to the FDE cPPs is to protect data at rest on a device that is lost or stolen while powered off without any prior access by an adversary. The use case where an adversary obtains a device that is in a powered state and is able to make modifications to the environment or the TOE itself (e.g., evil maid attacks) is not addressed by these cPPs (i.e., FDE-AA and FDE- EE).
      <!-- 
      <usecases/>
      -->

    </section>  <!-- Use Cases -->

  </section>   <!-- Introduction  -->


  <!-- Conformance Claims Section -->
  <!-- New conformance claims section for CC:2022. -->
  <!-- If boilerplate is "yes" something that is probably incorrect is generated -->
  <section title="Conformance Claims" id="sec-cclaims" boilerplate="no">

	<!-- cc-version: cc-2022r1 or cc-31r5   -->
	<!-- cc-approach: standard or direct-rationale  -->
	<!-- display: Should this info be displayed in the Conformance -->
	<!-- Claims section? If no, you have to write a free-form section -->
	<CClaimsInfo 
		cc-version="cc-2022r1"         
		cc-approach="direct-rationale"         
		display="yes">                 

		<!-- Conformance for STs: exact, strict, or demonstrable -->
		<cc-st-conf>exact</cc-st-conf>                  

		<!-- Part 2 & 3 conformance (extended or conformant) -->
		<cc-pt2-conf>extended</cc-pt2-conf>           
		<cc-pt3-conf>conformant</cc-pt3-conf>           

		<!-- Claims conformance to these other PPs (none)-->
		<cc-pp-conf/>              		  
		
		<!-- Can be in a configuration with these PPs and Modules -->
		<cc-pp-config-with>             
	        <PP-cc-ref/>
          <Mod-cc-ref>PP-Module for File Encryption Enterprise Management Version 1.0</Mod-cc-ref>
			
		</cc-pp-config-with>

		<!-- Package claims -->
		<cc-pkg-claim/>

	


	</CClaimsInfo>
  </section>  <!-- Conformance Claims -->
  

  
  <section title="Security Problem Definition" id="sec-spd">


    <sec:Threats>
      <h:p>This section provides a narrative that describes how the requirements mitigate the mapped threats. A requirement may mitigate aspects of multiple threats. A requirement may only mitigate a threat in a limited way. Some requirements are optional, either because the TSF fully mitigates the threat without the additional requirement(s) being claimed or because the TSF relies on its Operational Environment to provide the functionality that is described by the optional requirement(s).</h:p>
      <h:p>A threat consists of a threat agent, an asset and an adverse action of that threat agent on that asset. The threat agents are the entities that put the assets at risk if an adversary obtains a lost or stolen storage device. Threats drive the functional requirements for the target of evaluation (TOE). For instance, one threat below is T.UNAUTHORIZED_DATA_ACCESS. The threat agent is the possessor (unauthorized user) of a lost or stolen storage device. The asset is the data on the storage device, while the adverse action is to attempt to obtain those data from the storage device. This threat drives the functional requirements for the storage device encryption (TOE) to authorize who can use the TOE to access the hard disk and encrypt/decrypt the data. Since possession of the KEK, DEK, intermediate keys, authorization factors, submasks, and random numbers or any other values that contribute to the creation of keys or authorization factors could allow an unauthorized user to defeat the encryption, this SPD considers key material equivalent to the data in importance and they appear among the other assets addressed below.</h:p>
      <h:p>It is important to reemphasize at this point that this collaborative Protection Profile does not expect the product (TOE) to defend against the possessor of the lost or stolen hard disk who can introduce malicious code or exploitable hardware components into the Target of Evaluation (TOE) or the Operational Environment. It assumes that the user physically protects the TOE and that the Operational Environment provides sufficient protection against logical attacks. One specific area where a conformant TOE offers some protection is in providing updates to the TOE; other than this area, though, this cPP mandates no other countermeasures. Similarly, these requirements do not address the “lost and found” hard disk problem, where an adversary may have taken the hard disk, compromised the unencrypted portions of the boot device (e.g., MBR, boot partition), and then made it available to be recovered by the original user so that they would execute the compromised code.</h:p>

		<threats>
			<threat id="t-unauth-data-access" name="T.UNAUTHORIZED_DATA_ACCESS">
				<description>The cPP addresses the primary threat of unauthorized disclosure of protected data stored on a storage device. If an adversary obtains a lost or stolen storage device (e.g., a storage device contained in a laptop or a portable external storage device), they may attempt to connect a targeted storage device to a host of which they have complete control and have raw access to the storage device (e.g., to specified disk sectors, to specified blocks).
				</description>
				<addressed-by>FCS_AFA_EXT.2</addressed-by><rationale>This SFR mitigates this threat by requiring authentication to be re-entered upon return from a compliant power state. </rationale>
        <addressed-by> FCS_VAL_EXT.1</addressed-by><rationale>This SFR mitigates this threat by verifying the correct authentication and limits attempts to decrypt the data.</rationale>
        <addressed-by>FMT_MOF.1</addressed-by><rationale>This SFR mitigates this threat by restricting the ability to modified compliant power states to authorized users.</rationale>
				<addressed-by>FMT_SMF.1</addressed-by><rationale>This SFR mitigates this threat by ensuring the TSF provides the functions necessary to manage important aspects of the TOE including requests to change and erase the DEK.</rationale>
        
        <addressed-by>FMT_SMR.1</addressed-by><rationale>This SFR mitigates this threat by assigning users with the proper account permissions and privileges. This can be used with FMT_MOF.1 to restrict users to be able to modify certain power states covered in FMT_MOF.1.</rationale>
        <addressed-by>FPT_PWR_EXT.1</addressed-by><rationale>This SFR mitigates this threat by defining what power states are compliant for the TOE.</rationale>
        <addressed-by>FPT_PWR_EXT.2</addressed-by><rationale>This SFR mitigates this threat by defining conditions in which the TOE will enter a compliant power state. These requirements ensure the device is secure if lost in a compliant power state.</rationale>
        
        <addressed-by>FPT_TST_EXT.1</addressed-by><rationale>This SFR mitigates this threat by testing the behavior of the cryptographic functions through the use of the self-tests.</rationale>


			</threat>
			<threat id="t-keying_material_compromise" name="T.KEYING_MATERIAL_COMPROMISE">
				<description>Possession of any of the keys, authorization factors, submasks, and random numbers or any other values that contribute to the creation of keys or authorization factors could allow an unauthorized user to defeat the encryption. The cPP considers possession of key material of equal importance to the data itself. Threat agents may look for key material in unencrypted sectors of the storage device and on other peripherals in the operating environment (OE), e.g. BIOS configuration, SPI flash.
				</description>
        <addressed-by>FCS_AFA_EXT.1</addressed-by><rationale>This SFR mitigates this threat by requiring the authorization factors to be accepted by the TOE.</rationale>
        <addressed-by>FCS_AFA_EXT.2</addressed-by><rationale>This SFR mitigates this threat by requiring a valid authorization to decrypt the protected material.</rationale>
        <addressed-by>FCS_CKM.6</addressed-by><rationale>This SFR mitigates this threat by ensuring proper key material destruction.</rationale>
       <addressed-by>FCS_CKM.6/Power</addressed-by><rationale>This SFR mitigates this threat by ensuring proper key material destruction.</rationale>
       <addressed-by>FCS_KDF_EXT.1</addressed-by><rationale>This SFR mitigates this threat by requiring<comment>TBD</comment></rationale>
       <addressed-by>FCS_KYC_EXT.1</addressed-by><rationale>This SFR mitigates this threat by requiring chaining of keys to produce a BEV.</rationale>
       <addressed-by>FCS_PCC_EXT.1</addressed-by><rationale>This SFR mitigates this threat by requiring<comment>TBD- Is this a system password or a user password?</comment></rationale>
       
       <addressed-by>FCS_RBG_EXT.1</addressed-by><rationale>This SFR mitigates this threat by randomizing the generated keys inorder to reduce the likelihood of guessing the future keys.</rationale>
       <addressed-by>FCS_SMC_EXT.1</addressed-by><rationale>This SFR mitigates this threat by obscuring the submasks via a XOR or hashing operation..</rationale>
       <addressed-by>FCS_SNI_EXT.1</addressed-by><rationale>This SFR mitigates this threat by requiring additional obfuscation to the protected key material by introducing IV's and salting.</rationale>
        
        <addressed-by>FCS_VAL_EXT.1</addressed-by><rationale>This SFR mitigates this threat by defining defines methods for validation of keying material such as hashing, keyed-hash message authentication, and decrypting a known value with the keying material.<comment>TBD</comment></rationale>

        <addressed-by>FMT_MOF.1</addressed-by><rationale>This SFR mitigates this threat by restricting the ablitiy to modified compliant power states to authorized users.</rationale>
        <addressed-by>FMT_SMF.1</addressed-by><rationale>This SFR mitigates this threat by ensuring the TSF provides the functions necessary to manage important aspects of the TOE including generating</rationale>
        <addressed-by>FMT_SMR.1</addressed-by><rationale>This SFR mitigates this threat by assigning users with the proper acount permissions and privileges.</rationale>

        <addressed-by>FPT_KYP_EXT.1</addressed-by><rationale>This SFR mitigates this threat by requiring unwrapped key material is not stored in non-volatile memory.</rationale>
        
        <addressed-by>FPT_PWR_EXT.1</addressed-by><rationale>This SFR mitigates this threat by requiring the TOE to meet a compliant power saving state that protects and/or destroys key materials.</rationale>
        <addressed-by>FPT_PWR_EXT.2</addressed-by><rationale>This SFR mitigates this threat by requiring the TOE to enter into a safe state based on each condition. </rationale>
       
        <addressed-by>FPT_TST_EXT.1</addressed-by><rationale>This SFR mitigates this threat by verify the cryptographic functionality through the self testing functionality.<comment>TBD</comment></rationale>

        <addressed-by>FCS_CKM.1/AKG</addressed-by><rationale>This SFR mitigates this threat by requiring<comment>TBD</comment></rationale>
        <addressed-by>FCS_CKM.1/SKG</addressed-by><rationale>This SFR mitigates this threat by requiring<comment>TBD</comment></rationale>
        <addressed-by>FCS_COP.1/Hash</addressed-by><rationale>This SFR mitigates this threat by requiring<comment>TBD</comment></rationale>
        <addressed-by>FCS_COP.1/KeyedHash</addressed-by><rationale>This SFR mitigates this threat by requiring<comment>TBD</comment></rationale>
        <addressed-by>FCS_COP.1/KeyWrap</addressed-by><rationale>This SFR mitigates this threat by requiring<comment>TBD</comment></rationale>
        <addressed-by>FCS_COP.1/KeyEncap</addressed-by><rationale>This SFR mitigates this threat by requiring<comment>TBD</comment></rationale>
        <addressed-by>FCS_COP.1/SKC</addressed-by><rationale>This SFR mitigates this threat by requiring<comment>TBD</comment></rationale>
        <addressed-by>FCS_COP.1/KeyEnc</addressed-by><rationale>This SFR mitigates this threat by requiring<comment>TBD</comment></rationale>
        
        
        
        
       
        
        
       
				
			</threat><threat id="t-auth-guessing" name="T.AUTHORIZATION_GUESSING">
				<description>
          Threat agents may exercise host software to repeatedly guess authorization factors, such as passwords and PINs. Successful guessing of the authorization factors may cause the TOE to release BEV or otherwise put it in a state in which it discloses protected data to unauthorized users. <comment>Please see B.1 of the old PP. B.1 states that this threats need to be included in the ST even though it was already part of the mandatory threat list.</comment>
				</description>
        <addressed-by>FCS_AFA_EXT.1</addressed-by><rationale>This SFR mitigates this threat by requiring a set of authorization factors that will be difficult to guess.</rationale>

        <addressed-by>FCS_PCC_EXT.1</addressed-by><rationale>This SFR mitigates this threat by requiring user provides factors are conditioned to increase the cost of repeatedly guessing a user provided value.</rationale>
        <addressed-by>FCS_SMC_EXT.1</addressed-by><rationale>This SFR mitigates this threat by requiring multifactor authentication options, further increasing the difficulty of guessing a authentication factor.</rationale>
        <addressed-by>FCS_SNI_EXT.1</addressed-by><rationale>This SFR mitigates this threat by requiring  proper salts, which will prevent pre-computed attacks.</rationale>
        <addressed-by>FCS_VAL_EXT.1</addressed-by><rationale>This SFR mitigates this threat by requiring several options for enforcing validation, such as key sanitization of the DEK or when a configurable number of failed validation attempts is reached within a 24 hour period. This mitigates brute force attacks against authorization factors such as passwords and pins.</rationale>
       
				
			</threat>
      <threat id="t-keyspace-exhaust" name="T.KEYSPACE_EXHAUST">
				<description>Threat agents may perform a cryptographic exhaust against the  key space. Poorly chosen encryption algorithms and/or parameters allow attackers to exhaust the key space through brute force and give them unauthorized access to the data. 
				</description>
				<addressed-by>FCS_KYC_EXT.1</addressed-by><rationale>This SFR mitigates this threat by ensuring ensures all keys protecting the BEV are of the same strength.</rationale>
        <addressed-by>FCS_RBG_EXT.1</addressed-by><rationale>This SFR mitigates this threat by requiring<comment>TBD</comment></rationale>
        <addressed-by>FCS_CKM.1/AKG</addressed-by><rationale>This SFR mitigates this threat by requiring<comment>TBD</comment></rationale>
        <addressed-by>FCS_CKM.1/SKG</addressed-by><rationale>This SFR mitigates this threat by requiring<comment>TBD</comment></rationale>
        

				
			</threat>
      <threat id="t-unauth_update" name="T.UNAUTHORIZED_UPDATE">
				<description>Threat agents may attempt to perform an update of the product which compromises the security features of the TOE. Poorly chosen update protocols, signature generation and verification algorithms, and parameters may allow attackers to install software and/or firmware that bypasses the intended security features and provides them unauthorized access to data.
				</description>
        <addressed-by>FMT_SMF.1</addressed-by><rationale>This SFR mitigates this threat by ensuring the TSF provides the functions necessary to manage important behavior of the TOE which includes the initiation of system firmware/software updates.</rationale>
        <addressed-by>FPT_TUD_EXT.1</addressed-by><rationale>This SFR mitigates this threat by providing authorized users the ability to query the current version of the TOE software/firmware, initiate updates, and verify updates prior to installation using a manufacturer digital signature.</rationale>
        <addressed-by>FCS_COP.1/SigVer (optional)</addressed-by><rationale>This SFR mitigates this threat by defining the signature function that is used to verify updates.</rationale>

				
			</threat>
		</threats>
    </sec:Threats>
	
	<!-- Assumptions refer to operational objective objectives regardless of whether -->
	<!-- the document uses standard or direct rationale. -->
	
    <section title="Assumptions" id="sec-assumptions">
      <assumptions>
        <assumption name="A.INITIAL_DRIVE_STATE">
          <description> <h:p>
            Users enable Full Drive Encryption on a newly provisioned or initialized storage device free of protected data in areas not targeted for encryption. The cPP does not intend to include requirements to find all the areas on storage devices that potentially contain protected data. In some cases, it may not be possible - for example, data contained in “bad” sectors.
          </h:p><h:p>
            While inadvertent exposure to data contained in bad sectors or un-partitioned space is unlikely, one may use forensics tools to recover data from such areas of the storage device. Consequently, the cPP assumes bad sectors, un-partitioned space, and areas that must contain unencrypted code (e.g., MBR and AA/EE pre-authentication software) contain no protected data.
          </h:p>
          </description>
            <objective-refer ref="OE.INITIAL_DRIVE_STATE">
              <rationale>The operational environment objective OE.INITIAL_DRIVE_STATE is realized through A.INITIAL_DRIVE_STATE.</rationale>
            </objective-refer>
        </assumption>

        <assumption name="A.SECURE_STATE">
          <description>Upon the completion of proper provisioning, the drive is only assumed secure when in a powered off state up until it is powered on and receives initial authorization.</description>
            <objective-refer ref="OE.POWER_DOWN">
              <rationale>The operational environment objective OE.POWER_DOWN is realized through A.SECURE_STATE.</rationale>
            </objective-refer>
        </assumption>

        <assumption name="A.TRUSTED_CHANNEL">
          <description>Communication among and between product components (e.g., AA and EE) is sufficiently protected to prevent information disclosure. In cases in which a single product fulfils both cPPs, then the communication between the components does not extend beyond the boundary of the TOE (e.g., communication path is within the TOE boundary). In cases in which independent products satisfy the requirements of the AA and EE, the physically close proximity of the two products during their operation means that the threat agent has very little opportunity to interpose itself in the channel between the two without the user noticing and taking appropriate actions.</description>
          <objective-refer ref="OE.TRUSTED_CHANNEL">
            <rationale>The operational environment objective OE.TRUSTED_CHANNEL is realized through A.TRUSTED_CHANNEL.</rationale>
          </objective-refer>
        </assumption>
        <assumption name="A.TRAINED_USER">
          <description> Authorized users follow all provided user guidance, including keeping password/passphrases and external tokens securely stored separately from the storage device and/or platform.</description>
            <objective-refer ref="OE.PASSPHRASE_STRENGTH">
              <rationale>The operational environment objective OE.PASSPHRASE_STRENGTH is realized through A.TRAINED_USER.</rationale>
            </objective-refer>
            <objective-refer ref="OE.POWER_DOWN">
              <rationale>The operational environment objective OE.POWER_DOWN is realized through A.TRAINED_USER.</rationale>
            </objective-refer>
            <objective-refer ref="OE.SINGLE_USE_ET">
              <rationale>The operational environment objective OE.SINGLE_USE_ET is realized through A.TRAINED_USER.</rationale>
            </objective-refer>
            <objective-refer ref="OE.TRAINED_USERS">
              <rationale>The operational environment objective OE.TRAINED_USERS is realized through A.TRAINED_USER.</rationale>
            </objective-refer>
        </assumption>
        <assumption name="A.PLATFORM_STATE">
          <description>The platform in which the storage device resides (or an external storage device is connected) is free of malware that could interfere with the correct operation of the product.</description>
          <objective-refer ref="OE.PLATFORM_STATE">
            <rationale>The operational environment objective OE.PLATFORM_STATE is realized through A.PLATFORM_STATE.</rationale>
          </objective-refer>
        </assumption>
      <assumption name="A.SINGLE_USE_ET">
        <description>External tokens that contain authorization factors are used for no other purpose than to store the external token authorization factors.</description>
        <objective-refer ref="OE.SINGLE_USE_ET">
          <rationale>The operational environment objective OE.SINGLE_USE_ET is realized through A.SINGLE_USE_ET.</rationale>
        </objective-refer>
      </assumption>
    <assumption name="A.POWER_DOWN">
      <description><h:p>The user does not leave the platform and/or storage device unattended until all volatile memory is cleared after a power-off, so memory remnant attacks are infeasible.</h:p><h:p>Authorized users do not leave the platform and/or storage device in a mode where sensitive information persists in non-volatile storage (e.g., lock screen). Users power the platform and/or storage device down or place it into a power managed state, such as a “hibernation mode”.</h:p></description>
      <objective-refer ref="OE.POWER_DOWN">
        <rationale>The operational environment objective OE.POWER_DOWN is realized through A.POWER_DOWN.</rationale>
      </objective-refer>
    </assumption>
  <assumption name="A.PASSWORD_STRENGTH">
    <description>Authorized administrators ensure password/passphrase authorization factors have sufficient strength and entropy to reflect the sensitivity of the data being protected.</description>
    <objective-refer ref="OE.PASSPHRASE_STRENGTH">
      <rationale>The operational environment objective OE.PASSPHRASE_STRENGTH is realized through A.PASSWORD_STRENGTH.</rationale>
    </objective-refer>
  </assumption>
  <assumption name="A.PLATFORM_I&amp;A">
    <description>The product does not interfere with or change the normal platform identification and authentication functionality such as the operating system login. It may provide authorization factors to the operating system's login interface, but it will not change or degrade the functionality of the actual interface.</description>
    <objective-refer ref="OE.PLATFORM_I&amp;A">
      <rationale>The operational environment objective OE.PLATFORM_I&amp;A is realized through A.PLATFORM_I&amp;A.</rationale>
    </objective-refer>
  </assumption>
  <assumption name="A.STRONG_CRYPTO">
    <description>All cryptography implemented in the Operational Environment and used by the product meets the requirements listed in the cPP. This includes generation of external token authorization factors by a RBG. </description>
    <objective-refer ref="OE.STRONG_ENVIRONMENT_CRYPTO">
      <rationale>The operational environment objective OE.STRONG_ENVIRONMENT_CRYPTO is realized through A.STRONG_CRYPTO.</rationale>
    </objective-refer>
  </assumption>
  <assumption name="A.PHYSICAL">
    <description>The platform is assumed to be physically protected in its Operational Environment and not subject to physical attacks that compromise the security and/or interfere with the platform’s correct operation.</description>
    <objective-refer ref="OE.PHYSICAL">
      <rationale>The operational environment objective OE.PHYSICAL is realized through A.PHYSICAL.</rationale>
    </objective-refer>
  </assumption>
      </assumptions>
    </section>   <!-- Assumptions -->
	
	<!-- OSPs refer to Objectives or OE Objectives in standard approach documents. -->
	<!-- In direct rationale PPs, they should refer to OE Objectives -->
    <section title="Organizational Security Policies" id="sec-OSPs">
     
		<!-- 
        <OSP name="P.ENTERPRISE">
          <description>If the OS is bound to a directory or management server, the configuration of
            the OS software must be capable of adhering to the enterprise security policies
            distributed by them.</description>
        </OSP>
		-->
		
      <OSPs/>
    </section>   <!-- OSPs -->
	
	<!-- If there are no OSPs, then this: -->
<!--	<section title="Organizational Security Policies" id="sec-osp" boilerplate="no">
        <OSPs/>
    </section> 
-->
	
  </section>  <!-- Security Problem Definition -->
  
  
  <!-- This section is mandatory for standard approach documents.   -->
  <!-- It should be included in direct rationale documents if there are OE Objectives. -->
  <sec:Security_Objectives>
	 
	  
  <!--   4.1 Security Objectives for the Operational Environment -->
  <section title="Security Objectives for the Operational Environment"
	  id="SecurityObjectivesTOEorEnvironment">
	  The Operational Environment of the TOE implements technical and procedural measures to assist the TOE in correctly providing its security functionality. This part wise solution forms the security objectives for the Operational Environment and consists of a set of statements describing the goals that the Operational Environment should achieve.
	  <SOEs>
		
		  <SOE name="OE.TRUSTED_CHANNEL">
			  <description><h:p>Communication among and between product components (i.e., AA and EE) is sufficiently protected to prevent information disclosure.</h:p><h:p>Rationale: In situations where there is an opportunity for an adversary to interpose
          themselves in the channel between the AA and the EE a trusted channel must be established to prevent exploitation. [A.TRUSTED_CHANNEL] assumes the existence of a trusted channel between the AA and EE, except for when the boundary is within and does not breach the TOE or is in such close proximity that a breach is not possible without detection.</h:p> </description>
		  </SOE>
      <SOE name="OE.INITIAL_DRIVE_STATE">
			  <description><h:p>The OE provides a newly provisioned or initialized storage device free of protected data in areas not targeted for encryption.</h:p><h:p>
          Rationale: Since the cPP requires all protected data to encrypted A.INITIAL_DRIVE_STATE assumes that the initial state of the device targeted for FDE is free of protected data in those areas of the drive where encryption will not be invoked (e.g., MBR and AA/EE pre-authentication software). Given this known start state, the product (once installed and operational) ensures partitions of logical blocks of user accessible data is protected.
        </h:p> </description>
		  </SOE>
      <SOE name="OE.PASSPHRASE_STRENGTH">
			  <description><h:p>An authorized administrator will be responsible for ensuring that the passphrase authorization factor conforms to guidance from the Enterprise using the TOE.</h:p><h:p>Rationale: Users are properly trained [A.TRAINED_USER] to create authorization
          27 factors that conform to administrative guidance.</h:p>
           </description>
		  </SOE>
      <SOE name="OE.POWER_DOWN">
			  <description><h:p>Volatile memory is cleared after power-off so memory remnant attacks are infeasible.</h:p><h:p>Rationale: Users are properly trained [A.TRAINED_USER] to not leave the storage device unattended until powered down or placed in a managed power state such as “hibernation mode”. A.POWER_DOWN stipulates that such memory remnant attacks are infeasible given the device is in a powered-down or “hibernation mode” state.</h:p></description>
		  </SOE>
      <SOE name="OE.SINGLE_USE_ET">
			  <description><h:p>External tokens that contain authorization factors will be used for no
          35 other purpose than to store the external token authorization factor.</h:p><h:p>Rationale: Users are properly trained [A.TRAINED_USER] to use external token authorization factors as intended and for no other purpose.</h:p> </description>
		  </SOE>
      <SOE name="OE.STRONG_ENVIRONMENT_CRYPTO">
			  <description><h:p>The Operating Environment will provide a cryptographic function capability that is commensurate with the requirements and capabilities of the TOE and Appendix A<comment>Should we get rid of the referenced Appendix since it does not exist?</comment>.</h:p><h:p>Rationale: All cryptography implemented in the Operational Environment and used by
          7 the product meets the requirements listed in this cPP [A.STRONG_CRYPTO].</h:p> </description>
		  </SOE>
      <SOE name="OE.TRAINED_USERS">
			  <description><h:p>Authorized users will be properly trained and follow all guidance for securing the TOE and authorization factors. </h:p><h:p>Rationale: Users are properly trained [A.TRAINED_USER] to create authorization factors that conform to guidance, not store external token authorization factors with the device, and power down the TOE when required (OE.PLATFORM_STATE) The platform in which the storage device resides (or an external storage device is connected) is free of malware that could interfere with the correct operation of the product.</h:p>
        <h:p>A platform free of malware [A.PLATFORM_STATE] prevents an attack vector that could potentially interfere with the correct operation of the product.</h:p></description>
		  </SOE>
      <SOE name="OE.PLATFORM_STATE">
			  <description><h:p>The platform in which the storage device resides (or an external
          18 storage device is connected) is free of malware that could interfere with the correct operation
          19 of the product.</h:p><h:p>Rationale: A platform free of malware [A.PLATFORM_STATE] prevents an attack vector that could potentially interfere with the correct operation of the product.</h:p> </description>
		  </SOE>
      <SOE name="OE.PLATFORM_I&amp;A">
			  <description><h:p>The Operational Environment will provide individual user identification and authentication mechanisms that operate independently of the authorization factors used by the TOE.</h:p><h:p>Rationale: While the product may provide authorization factors to the Operating system's login interface, it must not change or degrade the functionality of the actual interface. A.PLATFORM_I&amp;A requires that the product not interfere or change the normal platform I&amp;A functionality.</h:p></description>
		  </SOE>
      <SOE name="OE.PHYSICAL">
			  <description><h:p>The Operational Environment will provide a secure physical computing space such than an adversary is not able to make modifications to the environment or to the TOE itself.</h:p><h:p>Rationale: As stated in section 1.6, the use case for this cPP is to protect data at rest on a device where the adversary receives it in a powered off state and has no prior access.</h:p> </description>
		  </SOE>
	  </SOEs>
  </section>
	
  
</sec:Security_Objectives>


  
<sec:Security_Requirements>  
	  
	<!--   5.1 Security Functional Requirements -->
  <sec:SFRs title="Security Functional Requirements">
    <h:p>The individual security functional requirements are specified in the sections below. Based on selections made in these SFRs it will also be necessary to include some of the selection-based SFRs in Appendix B<comment>Should we get rid of the referenced Appendix since it does not exist?</comment>. Additional optional SFRs may also be adopted from those listed in Appendix A<comment>Should we get rid of the referenced Appendix since it does not exist?</comment> for those functions that are provided by the TOE instead of its Operational Environment.</h:p><h:p> The Evaluation Activities defined in [SD] describe actions that the evaluator will take in order to determine compliance of a particular TOE with the SFRs. The content of these Evaluation Activities will therefore provide more insight into deliverables required from TOE Developers.
  </h:p>
    <section id="ss-audit-table" title="Auditable Events for Mandatory SFRs">
			<!-- <audit-table id="t-audit-mandatory" table="mandatory"/>-->
		</section>
      <section title="Cryptographic Support (FCS)" id="fcs">
	  

        <!-- FCS_CKM_EXT.1 -->
        <ext-comp-def title="Authorization Factor Acquisition" fam-id="FCS_AFA_EXT">
          <fam-behavior>Components in this family address the ability for the TOE to accept a variety of authorization factors. 
            </fam-behavior>
        </ext-comp-def>
        <ext-comp-def title="Cryptographic Key Management" fam-id="FCS_CKM_EXT">
          <fam-behavior><h:p>
            Cryptographic keys must be managed throughout their life cycle. This family is intended to support that lifecycle and consequently defines requirements for the following activities: cryptographic key generation, cryptographic key distribution, cryptographic key access and cryptographic key destruction. This family should be included whenever there are functional requirements for the management of cryptographic keys.</h:p>
            <h:p>The creation of this family is necessary because CC Part 2 provides the ability to specify the method of key destruction but does not define SFRs for the timing of key destruction or the ability to implement multiple key destruction methods.</h:p>
            </fam-behavior>
        </ext-comp-def>
        
        <ext-comp-def title="Cryptographic Key Derivation" fam-id="FCS_KDF_EXT">
          <fam-behavior>This family specifies the means by which an intermediate key is derived from a specified set of submasks.
            </fam-behavior>
        </ext-comp-def>
        <ext-comp-def title="Key Chaining" fam-id="FCS_KYC_EXT">
          <fam-behavior>This family provides the specification to be used for using multiple layers of encryption keys to ultimately secure the protected data encrypted on the drive.</fam-behavior>
        </ext-comp-def>
        <ext-comp-def title="Cryptographic Password Construction and Conditioning" fam-id="FCS_PCC_EXT">
          <fam-behavior>This family ensures that passwords used to produce the BEV are robust (in terms of their composition) and are conditioned to provide an appropriate-length bit string.</fam-behavior>
        </ext-comp-def>
        <ext-comp-def title="Random Bit Generation" fam-id="FCS_RBG_EXT">
          <fam-behavior>Components in this family address the requirements for random bit/number generation. This is a new family defined for the FCS class.</fam-behavior>
        </ext-comp-def>
        <ext-comp-def title="Submask Combining" fam-id="FCS_SMC_EXT">
          <fam-behavior>This family specifies the means by which submasks are combined, if the TOE supports more than one submask being used to derive or protect the BEV.</fam-behavior>
        </ext-comp-def>
        <ext-comp-def title="Cryptographic Operation (Salt, Nonce, and Initialization Vector Generation)" fam-id="FCS_SNI_EXT">
          <fam-behavior>This family ensures that salts, nonces, and IVs are well formed.</fam-behavior>
        </ext-comp-def>
        <ext-comp-def title="Validation of Cryptographic Elements" fam-id="FCS_VAL_EXT">
          <fam-behavior>This family specifies the means by which submasks and/or BEVs are determined to be valid prior to their use.
            </fam-behavior>
        </ext-comp-def>
       
            <f-component cc-id="fcs_afa_ext.1" name="Authorization Factor Acquisition" id="fcs-afa-ext-1">
              <consistency-rationale/>
	            <comp-lev>requires authorization factors to be accepted by the TOE.</comp-lev>
	<management>
    The following actions could be considered for the management functions in FMT:<h:ul>
      <h:li>Change the authorization factors to be used</h:li>
      <h:li>Generate external authorization factors using the TSF DRBG</h:li>
    </h:ul></management>
	<audit/>
	<dependencies/>
          <f-element id="fcs-afa-ext-1-1">
            <title>
              The TSF shall accept the following authorization factors: <selectables linebreak='yes'>
                <selectable>a submask derived from a password authorization factor conditioned as defined in FCS_PCC_EXT.1,</selectable>
                <selectable>an external Smartcard factor that is protecting a submask that is 
                  <selectables>
                      <selectable>generated by the TOE (using the RBG as specified in FCS_RBG_EXT.1)</selectable>
                      <selectable>generated by the Host Platform</selectable>
                  </selectables> protected using <selectables><selectable>RSA with key size 
                  <selectables>
                      <selectable>2048 bits</selectable>
                      <selectable>3072 bits</selectable>
                      <selectable>4096 bits</selectable>
                  </selectables></selectable> 
                  <selectable>ECC schemes using “NIST curves” of <selectables><selectable>P-256</selectable><selectable>P-384</selectable></selectables><selectable>P-521</selectable></selectable>
                </selectables>, with user presence proved by presentation of the smartcard and 
                  <selectables>
                      <selectable>none</selectable>
                      <selectable>an OE defined PIN</selectable>
                      <selectable>a configurable PIN</selectable>
                    </selectables>
                  </selectable>
                <selectable>an external USB token factor that is at least the same security strength as the BEV, and is providing a submask generated by the TOE, using the RBG as specified in FCS_RBG_EXT.1,</selectable>
                <selectable>an external USB token factor that is at least the same security strength as the BEV, and is providing a submask generated by the Host Platform</selectable>
              </selectables>
        
            </title>
            <note role="application"><h:i><h:p>This requirement specifies what authorization factors the TOE accepts from the user. A password entered by the user is one authorization factor that the TOE must be able to condition, as specified in FCS_PCC_EXT.1. Another option is a smartcard authorization factor, with the differentiating feature being how the value is generated – either by the TOE’s RBG or by the platform. An external USB token may also be used, with the submask value generated either by the TOE’s RBG or by the platform.</h:p>
              <h:p>The TOE may accept any number of authorization factors, and these are categorized as “submasks”. The ST author selects the authorization factors they support, and there may be multiple methods for a selection. </h:p>
              <h:p>
                Use of multiple authorization factors is preferable; if more than one authorization factor is used, the submasks produced must be combined using FCS_SMC_EXT.1 specified in Appendix A.</h:p></h:i>
            </note>
            <aactivity >
              <TSS><h:p>The evaluator shall first examine the TSS to ensure that the authorization factors
                specified in the ST are described. For password-based factors the examination of the
                TSS section is performed as part of FCS_PCC_EXT.1 Evaluation Activities.
                Additionally in this case, the evaluator shall verify that the operational guidance
                discusses the characteristics of external authorization factors (e.g., how the
                authorization factor must be generated; format(s) or standards that the authorization
                factor must meet) that are able to be used by the TOE.</h:p>
              <h:p>If other authorization factors are specified, then for each factor, the TSS specifies how
                the factors are input into the TOE.</h:p>
            </TSS>
            <Guidance>The evaluator shall verify that the AGD guidance includes instructions for all of the
              authorization factors. The AGD will discuss the characteristics of external
              authorization factors (e.g., how the authorization factor is generated; format(s) or
              standards that the authorization factor must meet, configuration of the TPM device
              used) that are able to be used by the TOE.</Guidance>
              <CustomEA name="KMD">
                <h:p>The evaluator shall examine the Key Management Description to confirm that the initial authorization factors (submasks) directly contribute to the unwrapping of the BEV.</h:p>
                <h:p>The evaluator shall verify the KMD describes how a submask is produced from the authorization factor (including any associated standards to which this process might conform), and verification is performed to ensure the length of the submask meets the required size (as specified in this requirement).</h:p></CustomEA>
              <Tests>
                <h:p>The password authorization factor is tested in FCS_PCC_EXT.1.</h:p>
                <h:p>The evaluator shall also perform the following tests:</h:p>
                <testlist>
                  <test>(conditional): If there is more than one authorization factor, ensure that failure to supply a required authorization factor does not result in access to the decrypted plaintext data.</test>
                </testlist>
                
              </Tests>
            </aactivity>
          </f-element>
          <audit-event/>
          <audit-event/>
            </f-component>
            <f-component cc-id="fcs_afa_ext.2" name="Timing of Authorization Factor Acquisition" id="fcs-afa-ext-2">
              <consistency-rationale/>
              <comp-lev>defines situations in which the TOE is to accept authorization factors.</comp-lev>
              <management/>
              <audit/>
              <dependencies><h:p>FCS_AFA_EXT.1 Authorization Factor Acquisition</h:p>
                <h:p>FPT_PWR_EXT.1 Power Saving States</h:p> 
              </dependencies>
              <f-element id="fcs-afa-ext-2-1">
                <title>The TSF shall reacquire the authorization factor(s) specified in FCS_AFA_EXT.1 upon transition from any Compliant power saving state specified in FPT_PWR_EXT.1 prior to permitting access to plaintext data.</title>
                <note role='application'><h:i>This should be accomplished by clearing keys that are no longer needed so that keys must be derived or decrypted again.</h:i></note>
                <aactivity>
                  <TSS>The evaluator shall examine the TSS for a description of authorization factors and which of the factors are used to gain access to user data after the TOE entered a Compliant power saving state. The TSS is inspected to ensure it describes that each authorization factor satisfies the requirements of FCS_AFA_EXT.1.1.</TSS>
                    <Guidance>The evaluator shall examine the guidance documentation for a description of authorization factors used to access plaintext data when resuming from a Compliant power saving state.</Guidance>
                    <CustomEA name="KMD">There are no KMD evaluation activities for this SFR.</CustomEA>
                    <Tests>
                      <h:p>The evaluator shall perform the following test:</h:p>
                      <h:ul>
                        <h:li>Enter the TOE into a Compliant power saving state</h:li>
                        <h:li>Force the TOE to resume from a Compliant power saving state</h:li>
                        <h:li>Release an invalid authorization factor and verify that access to decrypted plaintext data is denied</h:li>
                        <h:li>Release a valid authorization factor and verify that access to decrypted plaintext data is granted.</h:li>
                      </h:ul>
                    </Tests>
                </aactivity>
              </f-element>
              <audit-event/>
            </f-component>
            
            

            <f-component cc-id="fcs_ckm.1" iteration="AKG" name="Cryptographic Key Generation (Asymmetric Keys)" id="fcs-ckm-1-akg" status="sel-based">
              <depends on-sel="fcs-cop-1-keywrap"/>
              <f-element id="fcs_ckm-1-1-akg"><title>
                <h:b>Refinement:</h:b> The TSF shall generate <h:b>asymmetric</h:b> cryptographic keys in accordance with a specified cryptographic key generation algorithm: <h:b><selectables linebreak='yes'>
                  <selectable>RSA schemes using cryptographic key sizes of <selectables>
                    <selectable>2048-bit</selectable>
                    <selectable>3072-bit</selectable>
                    <selectable>4096-bit</selectable>
                  </selectables>that meet the following: FIPS PUB 186-4, “Digital Signature Standard (DSS)”, Appendix B.3<comment>Should we get rid of the referenced Appendix since it does not exist?</comment></selectable>
                  <selectable>ECC schemes using “NIST curves” of <selectables>
                    <selectable>P-256</selectable>
                    <selectable>P-384</selectable>
                    <selectable>P-521</selectable>
                  </selectables>that meet the following: FIPS PUB 186-4, “Digital Signature Standard (DSS)”, Appendix  B.4<comment>Should we get rid of the referenced Appendix since it does not exist?</comment></selectable>
                  <selectable>FFC schemes using cryptographic key sizes of 
                    <selectables>
                      <selectable>2048-bit</selectable>
                      <selectable>3072-bit</selectable>
                      <selectable>4096-bit</selectable>
                    </selectables> that meet the following: FIPS PUB 186-4, “Digital Signature Standard (DSS)”, Appendix B.1<comment>Should we get rid of the referenced Appendix since it does not exist?</comment></selectable>
                  </selectables></h:b> 
                  <h:s>and specified cryptographic key sizes 
                    <assignable>cryptographic key sizes</assignable> 
                    that meet the following: 
                    <assignable>list of standards</assignable>.</h:s>
                </title>
                <note role='application'><h:i>
                  <h:p>Asymmetric keys may be used to “wrap” a key or submask. This SFR should be included by the ST author when making the appropriate selection in FCS_COP.</h:p>
                  <h:p>Asymmetric Keys may also be used for the key chain. Therefore, the ST author should select FCS_CKM.1/AKG, if Asymmetric key generation is used.</h:p>
                  <h:p>If the TOE acts as a receiver in the RSA key establishment scheme, the TOE does not need to implement RSA key generation.</h:p>
                  <h:p>For all schemes (RSA schemes, ECC schemes, FFC schemes), an RBG is needed to a) generate seeds for RSA and to b) generate private keys directly for ECC and FFC. So FCS_RBG_EXT.1 is used together with this SFR. A hash algorithm is also required when the key pair generation algorithm is selected based on either Appendix B.3.2 or B.3.5<comment>Should we get rid of the referenced Appendix since it does not exist?</comment> of FIPS 186-4. So in such case, FCS_COP.1/KeyWrap is used together with this SFR.</h:p>
                  <comment>See old version of the PP- FCS_VAL_EXT.1 </comment>
                </h:i></note>
                <aactivity>
                    <TSS>The evaluator shall ensure that the TSS identifies the key sizes supported by the TOE.
                      If the ST specifies more than one scheme, the evaluator shall examine the TSS to verify
                      that it identifies the usage for each scheme.</TSS>
                    <Guidance>The evaluator shall verify that the AGD guidance instructs the administrator how to
                      configure the TOE to use the selected key generation scheme(s) and key size(s) for all
                      uses specified by the AGD documentation and defined in this cPP.</Guidance>
                    <CustomEA name="KMD">If the TOE uses an asymmetric key as part of the key chain, the KMD should detail
                      how the asymmetric key is used as part of the key chain.</CustomEA>
                    <Tests> <h:p>The following tests require the developer to provide access to a test platform that
                      provides the evaluator with tools that are typically not found on factory products.</h:p>
                      <h:p><h:b><h:i>Key Generation for FIPS PUB 186-4 RSA Schemes</h:i></h:b></h:p>
                      <h:p>The evaluator shall verify the implementation of RSA Key Generation by the TOE
                        using the Key Generation test. This test verifies the ability of the TSF to correctly
                        produce values for the key components including the public verification exponent e,
                        the private prime factors p and q, the public modulus n and the calculation of the private
                        signature exponent d.</h:p>
                        <h:p>Key Pair generation specifies 5 ways (or methods) to generate the primes p and q. These
                          include:</h:p>
                        <h:p>
                          <h:ol type='1'>
                            <h:li>Random Primes:<h:ul>
                              <h:li>Provable primes</h:li>
                              <h:li>Probable primes </h:li>
                            </h:ul></h:li>
                            <h:li>Primes with Conditions:<h:ul>
                              <h:li>Primes p1, p2, q1,q2, p and q shall all be provable primes</h:li>
                              <h:li>Primes p1, p2, q1, and q2 shall be provable primes and p and q shall be probable primes</h:li>
                              <h:li>Primes p1, p2, q1,q2, p and q shall all be probable primes</h:li>
                            </h:ul></h:li>                         
                          </h:ol></h:p>
                          <h:p>To test the key generation method for the Random Provable primes method and for all
                            the Primes with Conditions methods, the evaluator must seed the TSF key generation
                            routine with sufficient data to deterministically generate the RSA key pair. This
                            includes the random seed(s), the public exponent of the RSA key, and the desired key
                            length. For each key length supported, the evaluator shall have the TSF generate 25
                            key pairs. The evaluator shall verify the correctness of the TSF’s implementation by
                            comparing values generated by the TSF with those generated from a known good
                            implementation.</h:p>
                            <h:p><h:b><h:i>Key Generation for FIPS PUB 186-4 RSA Schemes</h:i></h:b></h:p>
                            <h:p><h:i>FIPS 186-4 ECC Key Generation Test</h:i></h:p>
                            <h:p>For each supported NIST curve, i.e., P-256, P-384 and P-521, the evaluator shall
                              require the implementation under test (IUT) to generate 10 private/public key pairs.
                              The private key shall be generated using an approved random bit generator (RBG). To
                              determine correctness, the evaluator shall submit the generated key pairs to the public
                              key verification (PKV) function of a known good implementation.
                              </h:p>
                            <h:p><h:i>FIPS 186-4 Public Key Verification (PKV) Test</h:i></h:p>
                            <h:p>For each supported NIST curve, i.e., P-256, P-384 and P-521, the evaluator shall
                              generate 10 private/public key pairs using the key generation function of a known good
                              implementation and modify five of the public key values so that they are incorrect,
                              leaving five values unchanged (i.e., correct). The evaluator shall obtain in response a
                              set of 10 PASS/FAIL values.</h:p>
                            <h:p><h:b><h:i>Key Generation for Finite-Field Cryptography (FFC)</h:i></h:b></h:p>
                            <h:p>The evaluator shall verify the implementation of the Parameters Generation and the
                              Key Generation for FFC by the TOE using the Parameter Generation and Key
                              Generation test. This test verifies the ability of the TSF to correctly produce values for
                              the field prime p, the cryptographic prime q (dividing p-1), the cryptographic group
                              generator g, and the calculation of the private key x and public key y.</h:p>
                              <h:p>The Parameter generation specifies 2 ways (or methods) to generate the cryptographic
                                prime q and the field prime p:</h:p>
                                <h:p>Cryptographic and Field Primes:<h:ul>
                                  <h:li>Primes q and p shall both be provable primes</h:li>
                                  <h:li>Primes q and field prime p shall both be probable primes</h:li>
                                </h:ul>
                                and two ways to generate the cryptographic group generator g:</h:p>
                                <h:p>Cryptographic Group Generator:<h:ul>
                                  <h:li>Generator g constructed through a verifiable process</h:li>
                                  <h:li>Generator g constructed through an unverifiable process.</h:li>
                                </h:ul></h:p>
                                <h:p>The Key generation specifies 2 ways to generate the private key x:</h:p>
                                <h:p>Private Key:<h:ul>
                                  <h:li>len(q) bit output of RBG where 1 &lt;=x &lt;= q-1</h:li>
                                  <h:li>len(q) + 64 bit output of RBG, followed by a mod q-1 operation and +1
                                    operation where 1&lt;= x&lt;=q-1.</h:li>
                                </h:ul></h:p>
                                <h:p>The security strength of the RBG must be at least that of the security offered by the
                                  FFC parameter set.</h:p>
                                <h:p>To test the cryptographic and field prime generation method for the provable primes
                                  method and/or the group generator g for a verifiable process, the evaluator must seed
                                  the TSF parameter generation routine with sufficient data to deterministically generate
                                  the parameter set.</h:p>
                                <h:p>For each key length supported, the evaluator shall have the TSF generate 25 parameter
                                  sets and key pairs. The evaluator shall verify the correctness of the TSF’s
                                  implementation by comparing values generated by the TSF with those generated from
                                  a known good implementation. Verification must also confirm. <h:ul>
                                    <h:li>g != 0,1</h:li>
                                    <h:li>q divides p-1</h:li>
                                    <h:li>g^q mod p = 1</h:li>
                                    <h:li>g^x mod p = y</h:li>

                                  </h:ul>
                                  for each FFC parameter set and key pair </h:p>
                                <h:p></h:p>
                          </Tests>
                </aactivity>
              </f-element>
              <audit-event/>
            </f-component>
            <f-component cc-id="fcs_ckm.1" iteration="SKG" name="Cryptographic Key Generation (Symmetric Keys)" id="fcs-ckm-1-b" status="sel-based">
              <depends on-sel="fpt-kyc-ext-2-2-sel-2"/>
              <f-element id="fcs_ckm-1-1-skg"><title>
                <h:b>Refinement:</h:b> The TSF shall generate symmetric cryptographic keys <h:b>using a Random Bit Generator as specified in FCS_RBG_EXT.1</h:b> and specified cryptographic key sizes <h:b><selectables><selectable>128 bit</selectable><selectable>256 bit</selectable></selectables></h:b> that meet the following: [<h:i>no standard</h:i>].
                </title>
                <note role='application'><h:i>
                  Symmetric keys may be used to generate keys along the key chain. Therefore, the ST author should select FCS_CKM.1/SKG, if Symmetric key generation is used.
                </h:i></note>
                <aactivity>
                  <TSS>The evaluator shall review the TSS to determine that a symmetric key is supported by
                    the product, that the TSS includes a description of the protection provided by the
                    product for this key. The evaluator shall ensure that the TSS identifies the key sizes
                    supported by the TOE.</TSS>
                    <Guidance>The evaluator shall verify that the AGD guidance instructs the administrator how to
                      configure the TOE to use the selected key size(s) for all uses specified by the AGD
                      documentation and defined in this cPP.</Guidance>
                    <CustomEA name="KMD">If the TOE uses a symmetric key as part of the key chain, the KMD should detail how
                      the symmetric key is used as part of the key chain.</CustomEA>
                    <Tests>There are no test evaluation activities for this SFR.</Tests>
                </aactivity>
              </f-element>
              <audit-event/>
            </f-component>
            <f-component cc-id="fcs_cop.1" iteration="SigVer" name="Cryptographic Operation (Signature Verification)" id="fcs-cop-1-sigver" status='sel-based' >
              
              <f-element id="fcs_cop-1-1-sigver">
                  <title><comment>Justin, the refinement from TUD.1.3 forces fcs_cop.1/Sigver to be claimed. Should this be updated to mandatory?</comment><h:b>Refinement:</h:b> The TSF shall perform [<h:i>cryptographic signature services (verification)</h:i>] in accordance with a <h:b><selectables linebreak='yes'>
                      <selectable>RSA Digital Signature Algorithm with a key size (modulus) of <selectables><selectable>2048-bit</selectable><selectable>3072-bit</selectable><selectable>4096-bit</selectable></selectables></selectable>
                      <selectable>Elliptic Curve Digital Signature Algorithm with a key size of 256 bits or greater</selectable>
                    </selectables></h:b> 
                    that meet the following: <h:b><selectables linebreak='yes'>
                      <selectable>FIPS PUB 186-4, “Digital Signature Standard (DSS)”, Section 5.5, using PKCS #1 v2.1 Signature Schemes RSASSA-PSS and/or RSASSA-PKCS1-v1_5; ISO/IEC 9796-2, Digital signature scheme 2 or Digital Signature scheme 3, for RSA schemes</selectable>
                      <selectable>FIPS PUB 186-4, “Digital Signature Standard (DSS)”, Section 6 and Appendix D, Implementing “NIST curves” <selectables>
                          <selectable>P-256</selectable>
                          <selectable>P-384</selectable>
                          <selectable>P-521</selectable></selectables>ISO/IEC 14888-3, Section 6.4, for ECDSA schemes
                        </selectable>
                    </selectables></h:b>.
                  </title>
                  <note role='application'><h:i>The selection should be consistent with the overall strength of the algorithm used for FCS_COP.1/SigVer and quantum resistant recommendations. For example, SHA-256 should be chosen for 2048-bit RSA or ECC with P-256, SHA-384 should be chosen for 3072-bit RSA, 4096-bit RSA, or ECC with P-384, and SHA-512 should be chosen for ECC with P9 521. The selection of the standard is made based on the algorithms selected.</h:i></note>
                  <aactivity>
                    <h:p>This requirement is used to verify digital signatures attached to updates from the TOE
                    manufacturer before installing those updates on the TOE. Because this component is to
                    be used in the update function, additional Evaluation Activities to those listed below
                    are covered in other evaluation activities sections in this document. The following
                    activities deal only with the implementation for the digital signature algorithm; the
                    evaluator performs the testing appropriate for the algorithm(s) selected in the
                    component.
                    </h:p>
                    <h:p>Hash functions and/or random number generation required by these algorithms must
                      be specified in the ST; therefore the Evaluation Activities associated with those
                      functions are contained in the associated Cryptographic Hashing and Random Bit
                      Generation sections. Additionally, the only function required by the TOE is the
                      verification of digital signatures. If the TOE generates digital signatures to support the
                      implementation of any functionality required by this cPP, then the applicable
                      evaluation and validation scheme must be consulted to determine the required
                      evaluation activities.</h:p>
                      <TSS>The evaluator shall check the TSS to ensure that it describes the overall flow of the
                        signature verification. This should at least include identification of the format and
                        general location (e.g., "firmware on the hard drive device" rather than “memory
                        location 0x00007A4B") of the data to be used in verifying the digital signature; how
                        the data received from the operational environment are brought on to the device; and
                        any processing that is performed that is not part of the digital signature algorithm (for
                        instance, checking of certificate revocation lists).</TSS>
                      <Guidance>There are no AGD evaluation activities for this SFR.</Guidance>
                      <CustomEA name="KMD">There are no KMD evaluation activities for this SFR.</CustomEA>
                      <Tests>
                        <h:p>Each section below contains the tests the evaluators must perform for each type of
                        digital signature scheme. Based on the assignments and selections in the requirement,
                        the evaluators choose the specific activities that correspond to those selections.</h:p>
                        <h:p>It should be noted that for the schemes given below, there are no key generation/domain
                          parameter generation testing requirements. This is because it is not anticipated that this
                          functionality would be needed in the end device, since the functionality is limited to
                          checking digital signatures in delivered updates. This means that the domain
                          parameters should have already been generated and encapsulated in the hard drive
                          firmware or on-board non-volatile storage. If key generation/domain parameter
                          generation is required, the evaluation and validation scheme must be consulted to
                          ensure the correct specification of the required evaluation activities and any additional
                          components.</h:p>
                          <h:p>The following tests are conditional based upon the selections made within the SFR.</h:p>
                          <h:p>The following tests may require the developer to provide access to a test platform that
                            provides the evaluator with tools that are typically not found on factory products.</h:p>
                          <h:p><h:u>ECDSA Algorithm Tests</h:u></h:p>
                          <h:p><h:b>ECDSA FIPS 186-4 Signature Verification Test</h:b></h:p>
                          <h:p>For each supported NIST curve (i.e., P-256, P-384 and P-521) and SHA function pair,
                            the evaluator shall generate a set of 10 1024-bit message, public key and signature
                            tuples and modify one of the values (message, public key or signature) in five of the 10
                            tuples. The evaluator shall obtain in response a set of 10 PASS/FAIL values.</h:p>
                          <h:p><h:i>RSA Signature Algorithm Tests</h:i></h:p>
                          <h:p><h:b>Signature Verification Test</h:b></h:p>
                          <h:p>The evaluator shall perform the Signature Verification test to verify the ability of the
                            TOE to recognize another party’s authentic and unauthentic signatures. The evaluator
                            shall inject errors into the test vectors produced during the Signature Verification Test
                            by introducing errors in some of the public keys e, messages, IR format, and/or
                            signatures. The TOE attempts to verify the signatures and returns success or failure.</h:p>
                            <h:p>The evaluator shall use these test vectors to emulate the signature verification test using
                              the corresponding parameters and verify that the TOE detects these errors.</h:p>
                      </Tests>
                  </aactivity>
              </f-element>
              <audit-event/>
            </f-component>
            <f-component cc-id="fcs_ckm.6" name="Cryptographic Key and Key Material Destruction (Destruction Timing)" id="fcs-ckm-6">
              <f-element id="fcs-ckm-6-1">
                <!-- fcs_ckm-ext-4-1-a-->
                <title>
                  The TSF shall destroy all keys and key material when no longer needed.
                </title>
                <note role='application'><h:i><h:p>Keys, including intermediate keys and key material that are no longer needed are destroyed by using an approved method, FCS_CKM.6. Examples of keys are </h:p><h:p>intermediate keys, submasks, and BEV. There may be instances where keys or key material that are contained in persistent storage are no longer needed and require destruction. Based on their implementation, vendors will explain when certain keys are no longer needed. There are multiple situations in which key material is no longer necessary, for example, a wrapped key may need to be destroyed when a password is changed. However, there are instances when keys are allowed to remain in memory, for example, a device identification key. If a PIN was used for a smartcard, the TSF should ensure that the PIN was properly destroyed.</h:p></h:i></note>
                  <aactivity>
                      <TSS>The evaluator shall verify the TSS provides a high level description of what it means for keys and key material to be no longer needed and when then should be expected to be destroyed.</TSS>
                      <Guidance>There are no AGD evaluation activities for this SFR.</Guidance>
                      <CustomEA name="KMD">
                        <h:p>The evaluator shall verify the KMD includes a description of the areas where keys and
                          key material reside and when the keys and key material are no longer needed.</h:p>
                        <h:p>The evaluator shall verify the KMD includes a key lifecycle, that includes a description
                          where key material reside, how the key material is used, how it is determined that keys
                          and key material are no longer needed, and how the material is destroyed once it is not
                          needed and that the documentation in the KMD follows FCS_CKM.4(a) for the
                          destruction.</h:p></CustomEA>
                      <Tests>There are no test evaluation activities for this SFR.</Tests>
                  </aactivity>
              </f-element>
              <f-element id="fcs-ckm-6-2">
                <!-- fcs_ckm-4-1-d-->
                <title>
                  <h:b>Refinement:</h:b> The TSF shall destroy cryptographic keys in accordance with a specified cryptographic key destruction method <h:b><selectables linebreak="yes">
                    <selectable>For volatile memory, the destruction shall be executed by a <selectables linebreak="yes">
                      <selectable>single overwrite consisting of <selectables linebreak="yes">
                        <selectable>a pseudo-random pattern using the TSF’s RBG,</selectable>
                        <selectable>zeroes,</selectable>
                        <selectable>ones,</selectable> 
                        <selectable>a new value of a key,</selectable>
                        <selectable><assignable>some value that does not contain any CSP</assignable></selectable>
                        

                      </selectables>.
                      </selectable>
                      <selectable>removal of power to the memory,</selectable>
                      <selectable>destruction of reference to the key directly followed by a request for garbage collection</selectable>
                      
                    </selectables></selectable>
                    <selectable>
                      For non-volatile storage that consists of the invocation of an interface provided by the underlying platform that <selectables linebreak="yes">
                        <selectable>logically addresses the storage location of the key and performs a <selectables>
                          <selectable>single</selectable>
                          <selectable><assignable>ST author defined multi-pass</assignable></selectable>
                        </selectables>overwrite consisting of <selectables linebreak="yes">
                          <selectable>a pseudo-random pattern using the TSF’s RBG,</selectable>
                          <selectable>zeroes,</selectable>
                          <selectable>ones,</selectable>
                          <selectable>a new value of a key,</selectable>
                          <selectable><assignable>some value that does not contain any CSP</assignable></selectable>
                        </selectables></selectable>
                        <selectable>instructs the underlying platform to destroy the abstraction that represents the key</selectable>
                      </selectables>
                    </selectable>
          
                  </selectables></h:b> that meets the following: [<h:i>no standard</h:i>]
                </title>
                <note role="application"><h:i>
                  <h:p>This SFR is FCS_CKM.6, to align with the numbering in the FDE EE cPP.</h:p>
                  <h:p>The interface referenced in the requirement could take different forms, the most likely of which is an application programming interface to an OS kernel. There may be various levels of abstraction visible. For instance, in a given implementation the application may have access to the file system details and may be able to logically address specific memory locations. In another implementation the application may simply have a handle to a resource and can only ask the platform to delete the resource. The level of detail to which the TOE has access will be reflected in the TSS section of the ST.</h:p>
                  <h:p>Several selections allow assignment of a ‘value that does not contain any CSP’. This means that the TOE uses some other specified data not drawn from an RBG meeting FCS_RBG_EXT requirements, and not being any of the particular values listed as other selection options. The point of the phrase ‘does not contain any CSP’ is to ensure that the overwritten data is carefully selected, and not taken from a general ‘pool’ that might contain current or residual data that itself requires confidentiality protection.</h:p>
                  
                </h:i></note>
                <aactivity>
                    <TSS>
                      <h:p>The evaluator examines the TSS to ensure it describes how the keys are managed in
                        volatile memory. This description includes details of how each identified key is
                        introduced into volatile memory (e.g. by derivation from user input, or by unwrapping
                        a wrapped key stored in non-volatile memory) and how they are overwritten.</h:p>
                      <h:p>The evaluator shall check to ensure the TSS lists each type of key that is stored in in
                        non-volatile memory, and identifies how the TOE interacts with the underlying
                        platform to manage keys (e.g., store, retrieve, destroy). The description includes details
                        on the method of how the TOE interacts with the platform, including an identification
                        and description of the interfaces it uses to manage keys (e.g., file system APIs, platform
                        key store APIs). </h:p>
                      <h:p>The evaluator examines the interface description for each different media type to ensure
                        that the interface supports the selection(s) and description in the TSS.</h:p>
                      <h:p>The evaluator shall check that the TSS identifies any configurations or circumstances
                        that may not strictly conform to the key destruction requirement. If the ST makes use
                        of the open assignment and fills in the type of pattern that is used, the evaluator
                        examines the TSS to ensure it describes how that pattern is obtained and used. The
                        evaluator shall verify that the pattern does not contain any CSPs.</h:p></TSS>
                      

                    <Guidance>
                      <h:p>There are a variety of concerns that may prevent or delay key destruction in some cases.
                        The evaluator shall check that the guidance documentation identifies configurations or
                        circumstances that may not strictly conform to the key destruction requirement, and
                        that this description is consistent with the relevant parts of the TSS and any other
                        relevant Required Supplementary Information. The evaluator shall check that the
                        guidance documentation provides guidance on situations where key destruction may
                        be delayed at the physical layer.</h:p>
                      <h:p>For example, when the TOE does not have full access to the physical memory, it is
                        possible that the storage may be implementing wear-leveling and garbage collection.
                        This may create additional copies of the key that are logically inaccessible but persist
                        physically. In this case, it is assumed the drive supports the TRIM command and
                        implements garbage collection to destroy these persistent copies when not actively
                        engaged in other tasks. </h:p>
                      <h:p>Drive vendors implement garbage collection in a variety of different ways, as such
                        there is a variable amount of time until data is truly removed from these solutions.
                        There is a risk that data may persist for a longer amount of time if it is contained in a
                        block with other data not ready for erasure. It is assumed the operating system and file
                        system of the OE support TRIM, instructing the non-volatile memory to erase copies
                        via garbage collection upon their deletion. </h:p>
                      <h:p>It is assumed that if a RAID array is being used, only set-ups that support TRIM are
                        utilized. It is assumed if the drive is connected via PCI-Express, the operating system
                        supports TRIM over that channel. It is assumed the drive is healthy and contains minimal corrupted data and will be end of life before a significant amount of damage
                        to drive health occurs, it is assumed there is a risk small amounts of potentially
                        recoverable data may remain in damaged areas of the drive.</h:p>
                      <h:p>Finally, it is assumed the keys are not stored using a method that would be inaccessible
                        to TRIM, such as being contained in a file less than 982 bytes which would be
                        completely contained in the master file table.</h:p></Guidance>
                    
                    <CustomEA name="KMD"> Refer to the TSS. KMD is combined with the TSS.</CustomEA>
                    <Tests>
                      <testlist>
                        <test> Applied to each key held as plaintext in volatile memory and subject to
                          destruction by overwrite by the TOE (whether or not the plaintext value is subsequently
                          encrypted for storage in volatile or non-volatile memory). In the case where the only
                          selection made for the destruction method key was removal of power, then this test is
                          unnecessary. The evaluator shall:<h:ol type="1">
                            <h:li>Record the value of the key in the TOE subject to clearing.</h:li>
                            <h:li>Cause the TOE to perform a normal cryptographic processing with the key
                              from Step #1.</h:li>
                            <h:li>Cause the TOE to clear the key.</h:li>
                            <h:li>Cause the TOE to stop the execution but not exit.</h:li>
                            <h:li>Cause the TOE to dump the entire memory of the TOE into a binary file.</h:li>
                            <h:li>Search the content of the binary file created in Step #5 for instances of the
                              known key value from Step #1.</h:li>
                            <h:li>Break the key value from Step #1 into 3 similar sized pieces and perform a
                              search using each piece.</h:li>
                          </h:ol>
                          <h:p>Steps 1-6 ensure that the complete key does not exist anywhere in volatile memory. If
                            a copy is found, then the test fails. </h:p>
                            <h:p>Step 7 ensures that partial key fragments do not remain in memory. If a fragment is
                              found, there is a miniscule chance that it is not within the context of a key (e.g., some
                              random bits that happen to match). If this is the case the test should be repeated with a
                              different key in Step #1. If a fragment is found the test fails.</h:p>
                              <h:p>The following tests apply only for the selection of “logically addresses the storage location…”, since the TOE in this instance has more
                                visibility into what is happening within the underlying platform (e.g., a logical view of
                                the media). For the selection of “instructs the underlying platform…”, the TOE has no visibility into the inner workings and
                                completely relies on the underlying platform, so there is no reason to test the TOE
                                beyond test 1.</h:p>
                              <h:p>For the selection of “logically addresses the storage location…”, the following tests are used to determine the TOE is able to request
                                the platform to overwrite the key with a TOE supplied pattern.</h:p>
                          </test>
                          <test>
                            Applied to each key held in non-volatile memory and subject to destruction by overwrite by the TOE. The evaluator shall use a tool that provides a logical view of the media (e.g., MBR file system):<h:ol type="1">
                              <h:li>Record the value of the key in the TOE subject to clearing.</h:li>
                              <h:li>Cause the TOE to perform a normal cryptographic processing with the key from Step #1.</h:li>
                              <h:li>Cause the TOE to clear the key.</h:li>
                              <h:li>Search the logical view that the key was stored in for instances of the known
                                key value from Step #1. If a copy is found, then the test fails.</h:li>
                              <h:li>Break the key value from Step #1 into 3 similar sized pieces and perform a
                                search using each piece. If a fragment is found then the test is repeated (as
                                described for Use Case 1 test 1 above), and if a fragment is found in the
                                repeated test then the test fails.</h:li>
                              

                            </h:ol>
                          </test>
                          <test>
                            Applied to each key held as non-volatile memory and subject to destruction by overwrite by the TOE. The evaluator shall use a tool that provides a logical view of the media:<h:ol type="1">
                              <h:li>Record the logical storage location of the key in the TOE subject to clearing</h:li>
                              <h:li>Cause the TOE to perform a normal cryptographic processing with the key
                                from Step #1.</h:li>
                              <h:li>Cause the TOE to clear the key.</h:li>
                              <h:li>Read the logical storage location in Step #1 of non-volatile memory to ensure
                                the appropriate pattern is utilized.</h:li>
                            </h:ol>
                            <h:p>
                              The test succeeds if correct pattern is used to overwrite the key in the memory location. If the pattern is not found the test fails.
                            </h:p>
                          </test>
                      </testlist>
                    </Tests>
                </aactivity>
              </f-element>
              <audit-event/>
            </f-component>
            <f-component cc-id="fcs_ckm.6" iteration="Power" name="Cryptographic Key and Key Material Destruction (Power Management)" id="fcs-ckm-6-power">
              <f-element id="fcs-ckm-6-power-1">
                <!--fcs_ckm-4-1-a -->
                <title>
                  <h:b>Refinement:</h:b> The TSF shall <h:b><selectables>
                    <selectable>instruct the Operational Environment to clear</selectable>
                    <selectable>erase</selectable>
                  </selectables> cryptographic keys and key material from volatile memory when transitioning to a Compliant power saving state as defined by FPT_PWR_EXT.1</h:b> that meets the following: [<h:i>a key destruction method specified in FCS_CKM.6</h:i>].
                </title>
                <note role="application"><h:i>In some cases, erasure of keys from volatile memory is only supported by the Operational Environment, in which case the Operational Environment must expose a well26 documented mechanism or interface to invoke the memory clearing operation.</h:i></note>
                <aactivity>
                  <TSS>
                    The evaluator shall verify the TSS provides a high level description of how keys stored in volatile memory are destroyed. The valuator to verify that TSS outlines: <h:ul>
                      <h:li>if and when the TSF or the Operational Environment is used to destroy keys from volatile memory;</h:li>
                      <h:li>if and how memory locations for (temporary) keys are tracked;</h:li>
                      <h:li>details of the interface used for key erasure when relying on the OE for memory clearing.</h:li></h:ul></TSS>
                  <Guidance>The evaluator shall check the guidance documentation if the TOE depends on the
                    Operational Environment for memory clearing and how that is achieved.</Guidance>
                  <CustomEA name="KMD">The evaluator shall check to ensure the KMD lists each type of key, its origin, possible memory locations in volatile memory.</CustomEA>
                  <Tests>There are no test evaluation activities for this SFR.</Tests>
                </aactivity>
              </f-element>
              <f-element id="fcs-ckm-6-power-2">
                <!-- fcs_ckm-ext-4-1-b-->
                <title>
                  <h:b>Refinement:</h:b> The TSF shall destroy all <h:b>key material, BEV, and authentication factors stored in plaintext</h:b> when <h:b>transitioning to a Compliant power saving state as defined by FPT_PWR_EXT.1</h:b>.
                </title>
                <note role='application'><h:i>The TOE may end up in a non-Compliant power saving state indistinguishable from a Compliant power state (e.g. as result of sudden and/or unexpected power loss). For those scenarios, the TOE or the Operational Environment guidance documentation must provide procedure(s) to support destruction of key material (e.g. automated reboot with memory clearing in early stages of the system’s power-on sequence).</h:i></note>
                  <aactivity>
                    <TSS>The evaluator shall verify the TSS provides a description of what keys and key material
                      are destroyed when entering any Compliant power saving state.</TSS>
                      <Guidance>The evaluator shall validate that guidance documentation contains clear warnings and
                        information on conditions in which the TOE may end up in a non-Compliant power
                        saving state indistinguishable from a Compliant power saving state. In that case it must
                        contain mitigation instructions on what to do in such scenarios.</Guidance>
                      <CustomEA name="KMD">
                        <h:p>The evaluator shall verify the KMD includes a description of the areas where keys and
                          key material reside.</h:p>
                          <h:p>The evaluator shall verify the KMD includes a key lifecycle that includes a description
                            where key material resides, how the key material is used, and how the material is
                            destroyed once it is not needed and that the documentation in the KMD follows
                            FCS_CKM.6 for the destruction.</h:p></CustomEA>
                      <Tests>There are no test evaluation activities for this SFR.</Tests>
                  </aactivity>
              </f-element>
              <audit-event/>
            </f-component>
            <f-component cc-id="fcs_cop.1" iteration="Hash" name="Cryptographic Operation (Hash Algorithm)" id="fcs-cop-1-hash" status="sel-based">
              <depends on-sel="fcs-val-ext-1-1-hash"/>
              <f-element id="fcs_cop-1-1-hash">
                <title>
                  <h:b>Refinement:</h:b> The TSF shall perform [<h:i>cryptographic hashing services</h:i>] in accordance with a specified cryptographic algorithm <h:b><selectables>
                    <selectable>SHA-256</selectable>
                    <selectable>SHA-384</selectable>
                    <selectable>SHA-512</selectable>
                  </selectables></h:b> and cryptographic key sizes <assignable>cryptographic key sizes</assignable> that meet the following: [<h:i>ISO/IEC 10118-3:2004</h:i>]
                </title>
                <note role='application'><h:i>The selection should be consistent with the overall strength of the algorithm used for FCS_COP.1/SigVer and quantum resistant recommendations. For example, SHA-256 should be chosen for 2048-bit RSA or ECC with P-256, SHA-384 should be chosen for 3072-bit RSA, 4096-bit RSA, or ECC with P-384, and SHA-512 should be chosen for ECC with P-521. The selection of the standard is made based on the algorithms selected.</h:i></note>
                <aactivity>
                    <TSS>The evaluator shall check that the association of the hash function with other TSF
                      cryptographic functions (for example, the digital signature verification function) is
                      documented in the TSS.</TSS>
                    <Guidance>The evaluator checks the operational guidance documents to determine that any system
                      configuration necessary to enable required hash size functionality is provided.</Guidance>
                    <CustomEA name="KMD">There are no KMD evaluation activities for this SFR.</CustomEA>
                    <Tests>
                      <h:p>The TSF hashing functions can be implemented in one of two modes. The first mode
                        is the byte-oriented mode. In this mode the TSF only hashes messages that are an
                        integral number of bytes in length; i.e., the length (in bits) of the message to be hashed
                        is divisible by 8. The second mode is the bit-oriented mode. In this mode the TSF
                        hashes messages of arbitrary length. As there are different tests for each mode, an
                        indication is given in the following sections for the bit-oriented vs. the byte-oriented
                        test mode.</h:p>
                      <h:p>
                        The evaluator shall perform all of the following tests for each hash algorithm implemented by the TSF and used to satisfy the requirements of this cPP.
                      </h:p>
                      <h:p><h:u>Short Messages Test Bit-oriented Mode</h:u></h:p>
                      <h:p>The evaluators devise an input set consisting of m+1 messages, where m is the block
                        length of the hash algorithm. The length of the messages range sequentially from 0 to
                        m bits. The message text shall be pseudorandomly generated. The evaluators compute
                        the message digest for each of the messages and ensure that the correct result is
                        produced when the messages are provided to the TSF.</h:p>
                        <h:p><h:u>Short Messages Test Byte-oriented Mode</h:u></h:p>
                        <h:p>The evaluators devise an input set consisting of m/8+1 messages, where m is the block
                          length of the hash algorithm. The length of the messages range sequentially from 0 to
                          m/8 bytes, with each message being an integral number of bytes. The message text shall
                          be pseudorandomly generated. The evaluators compute the message digest for each of
                          the messages and ensure that the correct result is produced when the messages are
                          provided to the TSF.</h:p>
                        <h:p><h:u>Selected Long Messages Test Bit-oriented Mode</h:u></h:p>
                        <h:p>The evaluators devise an input set consisting of m messages, where m is the block
                          length of the hash algorithm. For SHA-256, the length of the i-th message is 512 +
                          99*i, where 1 ≤ i ≤ m. For SHA-384 and SHA-512, the length of the i-th message is
                          1024 + 99*i, where 1 ≤ i ≤ m. The message text shall be pseudorandomly generated.
                          The evaluators compute the message digest for each of the messages and ensure that
                          the correct result is produced when the messages are provided to the TSF.</h:p>
                        <h:p><h:u>Selected Long Messages Test Byte-oriented Mode</h:u></h:p>
                        <h:p>The evaluators devise an input set consisting of m/8 messages, where m is the block
                          length of the hash algorithm. For SHA-256, the length of the i-th message is 512 +
                          8*99*i, where 1 ≤ i ≤ m/8. For SHA-384 and SHA-512, the length of the i-th message
                          is 1024 + 8*99*i, where 1 ≤ i ≤ m/8. The message text shall be pseudorandomly
                          generated. The evaluators compute the message digest for each of the messages and
                          ensure that the correct result is produced when the messages are provided to the TSF.</h:p>
                        <h:p><h:u>Pseudorandomly Generated Messages Test</h:u></h:p>
                        <h:p>This test is for byte-oriented implementations only. The evaluators randomly generate
                          a seed that is n bits long, where n is the length of the message digest produced by the
                          hash function to be tested. The evaluators then formulate a set of 100 messages and
                          associated digests by following the algorithm provided in Figure 1 of the NIST Secure
                          Hash Algorithm Validation System (SHAVS)
                          (https://csrc.nist.gov/CSRC/media/Projects/Cryptographic-Algorithm-ValidationProgram/documents/shs/SHAVS.pdf). The evaluators then ensure that the correct
                          result is produced when the messages are provided to the TSF.</h:p></Tests>
                </aactivity>
              </f-element>
              <audit-event/>
            </f-component>
            <f-component cc-id="fcs_cop.1" iteration="KeyedHash" name="Cryptographic Operation (Keyed Hash Algorithm)" id="fcs-cop-1-keyhash" status="sel-based">
              <depends on-sel='fcs-val-ext-1-1-keyhash'/>
              <f-element id="fcs_cop-1-1-keyhash">
                <title>
                  <comment> Justin, App notes do not specify which claim is requires this sfr. made an educated guess.</comment>
                  <h:b>Refinement:</h:b> The TSF shall perform cryptographic [<h:i>keyed-hash message authentication</h:i>] in accordance with a specified cryptographic algorithm <h:b><selectables>
                    <selectable>HMAC-SHA-256</selectable>
                    <selectable>HMAC-SHA-384</selectable>
                    <selectable>HMAC-SHA-512</selectable>
                  </selectables></h:b> and cryptographic key sizes <assignable>key size (in bits) used in HMAC</assignable> that meet the following: [<h:i>ISO/IEC 9797-2:2011, Section 7 “MAC Algorithm 2”</h:i>].
                </title>
                <note role='application'><h:i>The key size [k] in the assignment falls into a range between L1 and L2 (defined in ISO/IEC 10118 for the appropriate hash function for example for SHA-256 L1 = 512, L2 =256) where L2 ≤ k ≤ L1.</h:i></note>
                <aactivity>
                  <TSS>
                    <h:p>
                      If HMAC was selected:
                    </h:p>
                    <h:p>
                      The evaluator shall examine the TSS to ensure that it specifies the following values
                      used by the HMAC function: key length, hash function used, block size, and output
                      MAC length used.
                    </h:p>
                    <h:p>If CMAC was selected: </h:p>
                    <h:p>The evaluator shall examine the TSS to ensure that it specifies the following
                      values used by the CMAC function: key length, block cipher used, block size
                      (of the cipher), and output MAC length used.</h:p></TSS>
                    <Guidance>There are no AGD evaluation activities for this SFR.</Guidance>
                    <CustomEA name="KMD">There are no KMD evaluation activities for this SFR.</CustomEA>
                    <Tests>
                      <h:p>If HMAC was selected:</h:p>
                      <h:p>For each of the supported parameter sets, the evaluator shall compose 15 sets of test
                        data. Each set shall consist of a key and message data. The evaluator shall have the TSF
                        generate HMAC tags for these sets of test data. The resulting MAC tags shall be
                        compared to the result of generating HMAC tags with the same key using a known
                        good implementation.</h:p>
                      <h:p>
                        If CMAC was selected: 
                      </h:p>
                      <h:p>For each of the supported parameter sets, the evaluator shall compose at least
                        15 sets of test data. Each set shall consist of a key and message data. The test
                        data shall include messages of different lengths, some with partial blocks as the
                        last block and some with full blocks as the last block. The test data keys shall
                        include cases for which subkey K1 is generated both with and without using the
                        irreducible polynomial R_b, as well as cases for which subkey K2 is generated
                        from K1 both with and without using the irreducible polynomial R_b. (The
                        subkey generation and polynomial R_b are as defined in SP800-38E.) The
                        evaluator shall have the TSF generate CMAC tags for these sets of test data.
                        The resulting MAC tags shall be compared to the result of generating CMAC
                        tags with the same key using a known good implementation.</h:p></Tests>
                </aactivity>
              </f-element>
              <audit-event/>
            </f-component>
            <f-component cc-id="fcs_cop.1" iteration="KeyWrap" name="Cryptographic Operation (Key Wrapping)" id="fcs-cop-1-keywrap" status="sel-based">
              <depends on-sel="sel-fcs-kyc-ext-1-1-sel-2"/>
              <f-element id="fcs_cop-1-1-keywrap">
                
                <title>
                  <h:b>Refinement:</h:b> The TSF shall perform [<h:i>key wrapping</h:i>] in accordance with a specified cryptographic algorithm [<h:i>AES</h:i>] <h:b>in the following modes <selectables>
                    <selectable>KW</selectable>
                    <selectable>KWP</selectable>
                    <selectable>GCM</selectable>
                    <selectable>CCM</selectable>

                  </selectables></h:b> and the cryptographic key size <h:b><selectables><selectable>128 bits</selectable><selectable>256 bits</selectable></selectables></h:b> that meet the following: [<h:i>AES as specified in ISO/IEC 18033-3, <h:b><selectables>
                    <selectable>NIST SP 800-38F</selectable>
                    <selectable>ISO/IEC 19772</selectable>
                    <selectable>no other standards</selectable>
                  </selectables></h:b></h:i>].
                </title>
                <note role='application'><h:i>This requirement is used in the body of the ST if the ST author chooses to use key wrapping in the key chaining approach that is specified in FCS_KYC_EXT.1.</h:i></note>
                <aactivity>
                    <TSS>The evaluator shall verify the TSS includes a description of the key wrap function(s)
                      and shall verify the key wrap uses an approved key wrap algorithm according to the
                      appropriate specification.</TSS>
                    <Guidance>There are no AGD evaluation activities for this SFR.</Guidance>
                    <CustomEA name="KMD">The evaluator shall review the KMD to ensure that all keys are wrapped using the
                      approved method and a description of when the key wrapping occurs.</CustomEA>                      
                    <Tests>There are no test evaluation activities for this SFR.</Tests>
                </aactivity>
              </f-element>
              <audit-event/>
            </f-component>
            <f-component cc-id="fcs_cop.1" iteration="KeyEncap" name="Cryptographic Operation (Key Transport)" id="fcs-cop-1-keyencap" status="sel-based">
              <depends on-sel="sel-fcs-kyc-ext-1-1-sel-4"/>
              <f-element id="fcs_cop-1-1-keyencap">
                <title>
                  <h:b>Refinement:</h:b> The TSF shall perform [<h:i>key transport</h:i>] in accordance with a specified cryptographic algorithm [<h:i>RSA in the following modes [<h:b><selectables><selectable>KTS-OAEP</selectable><selectable>KTS6 KEM-KWS</selectable></selectables></h:b></h:i>] and the cryptographic key size <h:b><h:i><selectables>
                    <selectable>2048 bits</selectable>
                    <selectable>3072 bits</selectable>
                  </selectables></h:i></h:b> that meet the following: [<h:i>NIST SP 800-56B, Revision 1</h:i>].
                </title>
                <note role='application'><h:i>This requirement is used in the body of the ST if the ST author chooses to use key transport in the key chaining approach that is specified in FCS_KYC_EXT.1.</h:i></note>
                <aactivity>
                    <TSS>
                      <h:p>The evaluator shall verify the TSS provides a high level description of the RSA scheme
                        and the cryptographic key size that is being used, and that the asymmetric algorithm
                        being used for key transport is RSA. If more than one scheme/key size are allowed,
                        then the evaluator shall make sure and test all combinations of scheme and key size.
                        There may be more than one key size to specify – an RSA modulus size (and/or
                        encryption exponent size), an AES key size, hash sizes, MAC key/MAC tag size.</h:p>
                      <h:p>If the KTS-OAEP scheme was selected, the evaluator shall verify that the TSS
                        identifies the hash function, the mask generating function, the random bit generator,
                        the encryption primitive and decryption primitive.</h:p>
                      <h:p>If the KTS-KEM-KWS scheme was selected, the evaluator shall verify that the TSS
                        identifies the key derivation method, the AES-based key wrapping method, the secret
                        value encapsulation technique, and the random number generator.</h:p></TSS>
                    <Guidance>There are no AGD evaluation activities for this SFR.</Guidance>
                    <CustomEA name="KMD">There are no KMD evaluation activities for this SFR.</CustomEA>
                    <Tests>
                      <h:p>For each supported key transport schema, the evaluator shall initiate at least 25 sessions
                        that require key transport with an independently developed remote instance of a key
                        transport entity, using known RSA key-pairs. The evaluator shall observe traffic passed
                        from the sender-side and to the receiver-side of the TOE, and shall perform the
                        following tests, specific to which key transport scheme was employed.</h:p>
                        <h:p>
                          If the KTS-OAEP scheme was selected, the evaluator shall perform the following tests:<testlist>
                            <test>The evaluator shall inspect each cipher text, C, produced by the RSA-OAEP
                              encryption operation of the TOE and make sure it is the correct length, either 256
                              or 384 bytes depending on RSA key size. The evaluator shall also feed into the
                              TOE’s RSA-OEAP decryption operation some cipher texts that are the wrong
                              length and verify that the erroneous input is detected and that the decryption
                              operation exits with an error code.</test>
                            <test>The evaluator shall convert each cipher text, C, produced by the RSA-OAEP
                              encryption operation of the TOE to the correct cipher text integer, c, and use the
                              decryption primitive to compute em = RSADP((n,d),c) and convert em to the
                              encoded message EM. The evaluator shall then check that the first byte of EM is
                              0x00. The evaluator shall also feed into the TOE’s RSA-OEAP decryption
                              operation some cipher texts where the first byte of EM was set to a value other
                              than 0x00, and verify that the erroneous input is detected and that the decryption
                              operation exits with an error code.</test>
                            <test>The evaluator shall decrypt each cipher text, C, produced by the RSA-OAEP
                              encryption operation of the TOE using RSADP, and perform the OAEP decoding
                              operation (described in NIST SP 800-56B section 7.2.2.4) to recover HA’ || X. For
                              each HA’, the evaluator shall take the corresponding A and the specified hash
                              algorithm and verify that HA' = Hash(A). The evaluator shall also force the TOE
                              to perform some RSA-OAEP decryptions where the A value is passed incorrectly,
                              and the evaluator shall verify that an error is detected.</test>
                            <test>The evaluator shall check the format of the ‘X’ string recovered in OAEP.Test.3
                              to ensure that the format is of the form PS || 01 || K, where PS consists of zero or
                              more consecutive 0x00 bytes and K is the transported keying material. The
                              evaluator shall also feed into the TOE’s RSA-OEAP decryption operation some
                              cipher texts for which the resulting ‘X’ strings do not have the correct format (i.e.,
                              the leftmost non-zero byte is not 0x01). These incorrectly formatted ‘X’ variables
                              shall be detected by the RSA-OEAP decrypt function.
                              </test>
                            <test>The evaluator shall trigger all detectable decryption errors and validate that the
                              returned error codes are the same and that no information is given back to the
                              sender on which type of error occurred. The evaluator shall also validate that no
                              intermediate results from the TOE’s receiver-side operations are revealed to the
                              sender.</test>
                          </testlist>
                        </h:p>
                        <h:p>If the KTS-KEM-KWS scheme was selected, the evaluator shall perform the following
                          tests:<testlist>
                            <test>The evaluator shall inspect each cipher text, C, produced by RSA-KEM-KWS
                              encryption operation of the TOE and make sure the length (in bytes) of the cipher
                              text, cLen, is greater than nLen (the length, in bytes, of the modulus of the RSA
                              public key) and that cLen - nLen is consistent with the byte lengths supported by
                              the key wrapping algorithm. The evaluator shall feed into the RSA-KEM-KWS
                              decryption operation a cipher text of unsupported length and verify that an error
                              is detected and that the decryption process stops.</test>
                            <test>The evaluator shall separate the cipher text, C, produced by the sender-side of the
                              TOE into its C0 and C1 components and use the RSA decryption primitive to
                              recover the secret value, Z, from C0. The evaluator shall check that the unsigned
                              integer represented by Z is greater than 1 and less than n-1, where n is the modulus
                              of the RSA public key. The evaluator shall construct examples where the cipher
                              text is created with a secret value Z = 1 and make sure the RSA-KEM-KWS
                              decryption process detects the error. Similarly, the evaluator shall construct
                              examples where the cipher text is created with a secret value Z = n – 1 and make
                              sure the RSA-KEM-KWS decryption process detects the error.</test>
                            <test>The evaluator shall attempt to successfully recover the secret value Z, derive the
                              key wrapping key, KWK, and unwrap the KWA-cipher text following the RSAKEM-KWS decryption process given in NISP SP 800-56B section 7.2.3.4. If the
                              key-wrapping algorithm is AES-CCM, the evaluator shall verify that the value of
                              any (unwrapped) associated data, A, that was passed with the wrapped keying
                              material is correct The evaluator shall feed into the TOE’s RSA-KEM-KWS
                              decryption operation examples of incorrect cipher text and verify that a decryption
                              error is detected. If the key-wrapping algorithm is AES-CCM, the evaluator shall
                              attempt at least one decryption where the wrong value of A is given to the RSAKEM-KWS decryption operation and verify that a decryption error is detected.
                              Similarly, if the key-wrapping algorithm is AES-CCM, the evaluator shall attempt
                              at least one decryption where the wrong nonce is given to the RSA-KEM-KWS
                              decryption operation and verify that a decryption error is detected.</test>
                            <test>The evaluator shall trigger all detectable decryption errors and validate that the
                              resulting error codes are the same and that no information is given back to the
                              sender on which type of error occurred. The evaluator shall also validate that no
                              intermediate results from the TOE’s receiver-side operations (in particular, no Z
                              values) are revealed to the sender.</test>
                          </testlist></h:p></Tests>
                </aactivity>
              </f-element>
              <audit-event/>
            </f-component>
            <f-component cc-id="fcs_cop.1" iteration="SKC" name="Cryptographic Operation (AES Data Encryption/Decryption)" id="fcs-cop-1-skc" status="sel-based">
              <depends on-sel="fcs-val-ext-1-1-decr"/>
              <depends on-sel="sel-fcs-kyc-ext-1-1-sel-5"/>

              <f-element id="fcs_cop-1-1-skc">
                <title>
                  <h:b>Refinement:</h:b> The TSF shall perform [<h:i>data encryption and decryption</h:i>] in accordance with a specified cryptographic algorithm [<h:i>AES used in 
                    <h:b>
                      <selectables>
                        <selectable>CBC</selectable>
                        <selectable>GCM</selectable>
                        <selectable>XTS</selectable>
                      </selectables>
                    </h:b> mode</h:i>] and cryptographic key sizes <h:b>
                      <selectables>
                        <selectable>128 bits</selectable>
                        <selectable>256 bits</selectable>
                      </selectables></h:b> that meet the following: [<h:i>AES as specified in ISO /IEC 18033-3, <h:b>
                        <selectables>
                          <selectable>CBC as specified in ISO/IEC 10116</selectable>
                          <selectable>GCM as specified in ISO/IEC 19772</selectable>
                          <selectable>XTS as specified in IEEE 1619</selectable>
                        </selectables></h:b></h:i>].
                </title>
                <note role='application'><h:i>
                  <h:p>The intent of this requirement in the context of this cPP is to provide a SFR that expresses the appropriate symmetric encryption/decryption algorithms suitable for use in the TOE. If the ST author incorporates the validation requirement (FCS_VAL_EXT.1) and chooses to select the option to decrypt a known value and perform a comparison, this is the requirement used to specify the algorithm, modes, and key sizes the ST author can choose from.</h:p>
                  <h:p>When the XTS mode is selected, a cryptographic key of 256-bit or of 512-bit is allowed as specified in IEEE 1619. XTS-AES key is divided into two AES keys of equal size - for example, AES-128 is used as the underlying algorithm, when 256-bit key and XTS mode are selected. AES-256 is used when a 512-bit key and XTS mode are selected.</h:p>
              
                </h:i></note>
                <aactivity>
                  <TSS>The evaluator shall verify the TSS includes a description of the key size used for
                    encryption and the mode used for encryption.</TSS>
                    <Guidance>If multiple encryption modes are supported, the evaluator examines the guidance
                      documentation to determine that the method of choosing a specific mode/key size by
                      the end user is described.</Guidance>
                    <CustomEA name="KMD">There are no KMD evaluation activities for this SFR.</CustomEA>
                    <Tests>
                      <h:p>The following tests are conditional based upon the selections made in the SFR.</h:p>
                      <h:p><h:b>AES-CBC Tests</h:b></h:p>
                      <h:p>For the AES-CBC tests described below, the plaintext, ciphertext, and IV values shall
                        consist of 128-bit blocks. To determine correctness, the evaluator shall compare the
                        resulting values to those obtained by submitting the same inputs to a known-good
                        implementation.</h:p>
                        <h:p>These tests are intended to be equivalent to those described in NIST’s AES Algorithm
                          Validation Suite (AESAVS)
                          (http://csrc.nist.gov/groups/STM/cavp/documents/aes/AESAVS.pdf). Known answer
                          values tailored to exercise the AES-CBC implementation can be obtained using NIST’s
                          CAVS Algorithm Validation Tool or from NIST’s ACPV service for automated
                          algorithm tests (acvp.nist.gov), when available. It is not recommended that evaluators
                          use values obtained from static sources such as the example NIST’s AES Known
                          Answer Test Values from the AESAVS document, or use values not generated
                          expressly to exercise the AES-CBC implementation.</h:p>
                      <h:p><h:b>AES-CBC Known Answer Tests</h:b></h:p>
                      <h:p>KAT-1 (GFSBox):</h:p>
                      <h:p>To test the encrypt functionality of AES-CBC, the evaluator shall supply a set of five
                        different plaintext values for each selected key size and obtain the ciphertext value that
                        results from AES-CBC encryption of the given plaintext using a key value of all zeros
                        and an IV of all zeros.
                      </h:p>
                      <h:p>To test the decrypt functionality of AES-CBC, the evaluator shall supply a set of five
                        different ciphertext values for each selected key size and obtain the plaintext value that
                        results from AES-CBC decryption of the given ciphertext using a key value of all zeros
                        and an IV of all zeros.</h:p>
                      <h:p>KAT-2 (KeySBox):</h:p>
                      <h:p>To test the encrypt functionality of AES-CBC, the evaluator shall supply a set of five
                        different key values for each selected key size and obtain the ciphertext value that
                        results from AES-CBC encryption of an all-zeros plaintext using the given key value
                        and an IV of all zeros.</h:p>
                      <h:p>To test the decrypt functionality of AES-CBC, the evaluator shall supply a set of five
                          different key values for each selected key size and obtain the plaintext that results from
                          AES-CBC decryption of an all-zeros ciphertext using the given key and an IV of all
                          zeros.</h:p>
                      <h:p>KAT-3 (Variable Key):</h:p>
                      <h:p>To test the encrypt functionality of AES-CBC, the evaluator shall supply a set of keys
                            for each selected key size (as described below) and obtain the ciphertext value that
                            results from AES encryption of an all-zeros plaintext using each key and an IV of all
                            zeros.</h:p>
                      <h:p>Key i in each set shall have the leftmost i bits set to ones and the remaining bits to
                              zeros, for values of i from 1 to the key size. The keys and corresponding ciphertext are
                              listed in AESAVS, Appendix E.</h:p>
                      <h:p>To test the decrypt functionality of AES-CBC, the evaluator shall use the same keys as
                        above to decrypt the ciphertext results from above. Each decryption should result in an
                        all-zeros plaintext.</h:p>
                      <h:p>KAT-4 (Variable Text):</h:p>
                      <h:p>To test the encrypt functionality of AES-CBC, for each selected key size, the evaluator
                        shall supply a set of 128-bit plaintext values (as described below) and obtain the
                        ciphertext values that result from AES-CBC encryption of each plaintext value using a
                        key of each size and IV consisting of all zeros.</h:p>
                      <h:p>Plaintext value i shall have the leftmost i bits set to ones and the remaining bits set to
                        zeros, for values of i from 1 to 128. The plaintext values are listed in AESAVS,
                        Appendix D.</h:p>
                      <h:p>To test the decrypt functionality of AES-CBC, for each selected key size, use the
                        plaintext values from above as ciphertext input, and AES-CBC decrypt each ciphertext
                        value using key of each size consisting of all zeros and an IV of all zeros.</h:p>
                      <h:p><h:b>AES-CBC Multi-Block Message Test</h:b></h:p>
                      <h:p>The evaluator shall test the encrypt functionality by encrypting nine i-block messages
                        for each selected key size, for 2 ≤ i ≤ 10. For each test, the evaluator shall supply a key,
                        an IV, and a plaintext message of length i blocks, and encrypt the message using AESCBC. The resulting ciphertext values shall be compared to the results of encrypting the
                        plaintext messages using a known good implementation</h:p>
                      <h:p>The evaluator shall test the decrypt functionality by decrypting nine i-block messages
                        for each selected key size, for 2 ≤ i ≤ 10. For each test, the evaluator shall supply a key,
                        an IV, and a ciphertext message of length i blocks, and decrypt the message using AESCBC. The resulting plaintext values shall be compared to the results of decrypting the
                        ciphertext messages using a known good implementation.</h:p>
                      <h:p><h:b>AES-CBC Monte Carlo Tests</h:b></h:p>
                      <h:p>The evaluator shall test the encrypt functionality for each selected key size using 100
                        3-tuples of pseudo-random values for plaintext, IVs, and keys.</h:p>
                      <h:p>The evaluator shall supply a single 3-tuple of pseudo-random values for each selected
                        key size. This 3-tuple of plaintext, IV, and key is provided as input to the below
                        algorithm to generate the remaining 99 3-tuples, and to run each 3-tuple through 1000
                        iterations of AES-CBC encryption.</h:p>
                      <h:p># Input: PT, IV, Key
                        <h:br/>Key[0] = Key
                        <h:br/>IV[0] = IV
                        <h:br/>PT[0] = PT</h:p>
                      <h:p>for i = 1 to 100 {
                        <h:br/>Output Key[i], IV[i], PT[0]
                        <h:br/>for j = 1 to 1000 {
                          <h:br/>if j == 1 {
                            <h:br/>CT[1] = AES-CBC-Encrypt(Key[i], IV[i], PT[1])
                            <h:br/>PT[2] = IV[i]
                            <h:br/>} else {
                              <h:br/>CT[j] = AES-CBC-Encrypt(Key[i], PT[j])
                              <h:br/>PT[j+1] = CT[j-1]
                              <h:br/>}
                              <h:br/>}
                              <h:br/>Output CT[1000]</h:p>
                      <h:p>
                        <h:br/>If KeySize == 128 { Key[i+1] = Key[i] xor CT[1000] }
                        <h:br/>If KeySize == 256 { Key[i+1] = Key[i] xor ((CT[999] &lt;&lt; 128) | CT[1000]) }
                      </h:p>
                      <h:p>
                        <h:br/>IV[i+1] = CT[1000]
                        <h:br/>PT[0] = CT[999]
                         }</h:p>
                      <h:p>The ciphertext computed in the 1000th iteration (CT[1000]) is the result for each of the
                        100 3-tuples for each selected key size. This result shall be compared to the result of
                        running 1000 iterations with the same values using a known good implementation.</h:p>
                      <h:p>The evaluator shall test the decrypt functionality using the same test as above,
                        exchanging CT and PT, and replacing AES-CBC-Encrypt with AES-CBC-Decrypt.</h:p>
                      <h:p><h:b>AES-GCM Test</h:b></h:p>
                      <h:p>The evaluator shall test the authenticated encrypt functionality of AES-GCM for each
                        combination of the following input parameter lengths:</h:p>
                      <h:p><h:b>128 bit and 256 bit keys</h:b></h:p>
                      <h:p><h:b>Two plaintext lengths.</h:b> One of the plaintext lengths shall be a non-zero integer multiple of 128 bits, if supported. The other plaintext length shall not be an integer multiple of 128 bits, if supported.</h:p>
                      <h:p><h:b>Three AAD lengths.</h:b> One AAD length shall be 0, if supported. One AAD length
                      shall be a non-zero integer multiple of 128 bits, if supported. One AAD length shall
                      not be an integer multiple of 128 bits, if supported.</h:p>
                      <h:p><h:b>Two IV lengths.</h:b> If 96 bit IV is supported, 96 bits shall be one of the two IV lengths
                      tested.</h:p>
                      <h:p>The evaluator shall test the encrypt functionality using a set of 10 key, plaintext, AAD,
                        and IV tuples for each combination of parameter lengths above and obtain the
                        ciphertext value and tag that results from AES-GCM authenticated encrypt. Each
                        supported tag length shall be tested at least once per set of 10. The IV value may be
                        supplied by the evaluator or the implementation being tested, as long as it is known.</h:p>
                      <h:p>The evaluator shall test the decrypt functionality using a set of 10 key, ciphertext, tag,
                        AAD, and IV 5-tuples for each combination of parameter lengths above and obtain a
                        Pass/Fail result on authentication and the decrypted plaintext if Pass. The set shall
                        include five tuples that Pass and five that Fail.</h:p>
                      <h:p>The results from each test may either be obtained by the evaluator directly or by
                        supplying the inputs to the implementer and receiving the results in response. To
                        determine correctness, the evaluator shall compare the resulting values to those
                        obtained by submitting the same inputs to a known good implementation.</h:p>
                      <h:p><h:b>XTS-AES Test</h:b></h:p>
                      <h:p>The evaluator shall test the encrypt functionality of XTS-AES for each combination of
                        the following input parameter lengths:</h:p>
                      <h:p><h:b>256 bit (for AES-128) and 512 bit (for AES-256) keys</h:b></h:p>
                      <h:p><h:b>Three data unit (i.e., plaintext) lengths. </h:b>One of the data unit lengths shall be a
                      non-zero integer multiple of 128 bits, if supported. One of the data unit lengths
                      shall be an integer multiple of 128 bits, if supported. The third data unit length shall
                      be either the longest supported data unit length or 216 bits, whichever is smaller.</h:p>
                      <h:p>using a set of 100 (key, plaintext and 128-bit random tweak value) 3-tuples and obtain
                        the ciphertext that results from XTS-AES encrypt.</h:p>
                      <h:p>The evaluator may supply a data unit sequence number instead of the tweak value if
                        the implementation supports it. The data unit sequence number is a base-10 number
                        ranging between 0 and 255 that implementations convert to a tweak value internally</h:p>
                      <h:p>The evaluator shall test the decrypt functionality of XTS-AES using the same test as
                        for encrypt, replacing plaintext values with ciphertext values and XTS-AES encrypt
                        with XTS-AES decrypt.</h:p>
                    </Tests>
                </aactivity>
              </f-element>
              <audit-event/>
            </f-component>
            <f-component cc-id="fcs_cop.1" iteration="KeyEnc" name="Cryptographic Operation (Key Encryption)" id="fcs-cop-1-kE" status="sel-based">
             <depends on-sel="sel-fcs-kyc-ext-1-1-sel-5"/>
              <f-element id="fcs_cop-1-1-kE">
                <title>
                  <h:b>Refinement:</h:b> The TSF shall perform [<h:i>key encryption and decryption</h:i>] in accordance with a specified cryptographic algorithm [<h:i>AES used in <h:b><selectables><selectable>CBC</selectable><selectable>GCM</selectable></selectables></h:b> mode</h:i>] and cryptographic key sizes <h:b><selectables><selectable>128 bits</selectable><selectable>256 bits</selectable></selectables></h:b> that meet the following: [<h:i>AES as specified in ISO /IEC 18033-3,</h:i> <h:b><selectables><selectable>CBC as specified in ISO/IEC 10116</selectable><selectable>GCM as specified in ISO/IEC 19772</selectable></selectables></h:b>].
                </title>
                <note role='application'><h:i>
                  This requirement is used in the body of the ST if the ST author chooses to use AES encryption/decryption for protecting the keys as part of the key chaining approach that is specified in FCS_KYC_EXT.1.
                </h:i></note>
                <aactivity>
                  <TSS>The evaluator shall verify the TSS includes a description of the key size used for
                    encryption and the mode used for the key encryption.</TSS>
                  <Guidance>If multiple key encryption modes are supported, the evaluator examines the guidance
                    documentation to determine that the method of choosing a specific mode/key size by
                    the end user is described.</Guidance>
                  <CustomEA name="KMD">The evaluator shall examine the vendor’s KMD to verify that it includes a description
                    of how key encryption will be used as part of the key chain.</CustomEA>
                  <Tests>The AES test should be followed in FCS_COP.1/SKC Cryptographic Operation (AES
                    Data Encryption/Decryption.</Tests>
                </aactivity>
              </f-element>
              <audit-event/>
            </f-component>

            <f-component cc-id="fcs_kdf_ext.1" name="Cryptographic Key Derivation" id="fcs-kdf-ext-1" status="sel-based">
              <consistency-rationale/>
              <comp-lev>requires the TSF to derive intermediate keys from submasks using the specified hash functions.</comp-lev>
              <management/>
              <audit/>
              <dependencies>FCS_COP.1/KeyedHash Cryptographic Operation (Keyed Hash Algorithm)</dependencies>
              <depends on-sel="sel-fcs-kyc-ext-1-1-sel-1"/>
              <f-element id="fcs-kdf-ext-1">
                <title>
                  The TSF shall accept <selectables>
                    <selectable>a RNG generated submask as specified in FCS_RBG_EXT.1</selectable>
                    <selectable>a conditioned password submask</selectable>
                    <selectable>imported submask</selectable>
                  </selectables> to derive an intermediate key, as defined in <selectables linebreak='yes'>
                    <selectable>NIST SP 800-108 <selectables>
                      <selectable>KDF in Counter Mode</selectable>
                      <selectable>KDF in Feedback Mode</selectable>
                      <selectable>KDF in Double-Pipeline Iteration Mode</selectable>
                    </selectables></selectable>
                    <selectable>NIST SP 800-132</selectable>
                  </selectables>using the keyed-hash functions specified in FCS_COP.1/KeyedHash, such that the output is at least of equivalent security strength (in number of bits) to the BEV.

                </title>
                <note role='application'><h:i>
                  <h:p>This requirement is used in the body of the ST if the ST author chooses to use key derivation in the key chaining approach that is specified in FCS_KYC_EXT.1.</h:p>
                  <h:p>This requirement establishes acceptable methods for generating a new random key or an existing submask to create a new key along the key chain.</h:p>

                </h:i></note>
                <aactivity>
                  <TSS>The evaluator shall verify the TSS includes a description of the key derivation function
                    and shall verify the key derivation uses an approved derivation mode and key expansion
                    algorithm according to SP 800-108 and SP 800-132.</TSS>
                  <Guidance>There are no AGD evaluation activities for this SFR.</Guidance>
                  <CustomEA name="KMD">The evaluator shall examine the vendor’s KMD to ensure that all keys used are derived
                    using an approved method and a description of how and when the keys are derived.</CustomEA>
                  <Tests>There are no test evaluation activities for this SFR.</Tests>
                </aactivity>
              </f-element>
              <audit-event/>
            </f-component>
            <f-component cc-id="fcs_kyc_ext.1" name="Key Chaining (Initiator)" id="fcs-kyc-ext-1">
              <consistency-rationale/>
              <comp-lev>requires the TSF to maintain a key chain for a BEV that is provided to a component external to the TOE.</comp-lev>
              <management/>
              <audit/>
              <dependencies>
                <h:p>FCS_CKM.1/AKG Cryptographic Key Generation (Asymmetric Keys),</h:p>
                <h:p>FCS_CKM.1/SKG Cryptographic Operation (Symmetric Keys),</h:p>
                <h:p>FCS_COP.1/KeyWrap Cryptographic Operation (Key Wrapping),</h:p>
                <h:p>FCS_COP.1/KeyEncap Cryptographic Operation (Key Transport),</h:p>
                <h:p>FCS_COP.1/KeyEnc Cryptographic Operation (Key Encryption),</h:p>
                <h:p>FCS_SMC_EXT.1 Submask Combining,</h:p>
                <h:p>FCS_VAL_EXT.1 Validation</h:p>
              </dependencies>
              <f-element id="fcs-kyc-ext-1-1">
                <title>
                  The TSF shall maintain a key chain of: 
                    <selectables linebreak="yes">
                      <selectable>one, using a submask as the BEV;</selectable>
                      <selectable>intermediate keys originating from one or more submask(s) to the BEV using the following method(s):
                        <selectables linebreak="yes">
                          <selectable id="sel-fcs-kyc-ext-1-1-sel-1">key derivation as specified in FCS_KDF_EXT.1</selectable>
                          <selectable id="sel-fcs-kyc-ext-1-1-sel-2">key wrapping as specified in FCS_COP.1/KeyWrap,</selectable>
                          <selectable id="sel-fcs-kyc-ext-1-1-sel-3">key combining as specified in FCS_SMC_EXT.1,</selectable>
                          <selectable id="sel-fcs-kyc-ext-1-1-sel-4">key transport as specified in FCS_COP.1/KeyEncap,</selectable>
                          <selectable id="sel-fcs-kyc-ext-1-1-sel-5">key encryption as specified in FCS_COP.1/KeyEnc</selectable>
                      </selectables></selectable></selectables>
                  while maintaining an effective strength of 
                    <selectables>
                      <selectable>128 bits</selectable>
                      <selectable>256 bits</selectable>
                    </selectables> for symmetric keys and an effective strength of 
                      <selectables>
                      <selectable>not applicable</selectable>
                      <selectable>112 bits</selectable>
                      <selectable>128 bits</selectable>
                      <selectable>192 bits</selectable>
                      <selectable>256 bits</selectable>
                  </selectables> for asymmetric keys.
                </title>
                <note role='application'><h:i></h:i></note>
                  <aactivity><no-tests/></aactivity>
              </f-element>
              <f-element id="fcs-kyc-ext-1-2">
                <title>
                  The TSF shall provide at least a 
                    <selectables>
                      <selectable>128 bits</selectable>
                      <selectable>256 bits</selectable>
                    </selectables> BEV to <assignable>one or more external entities</assignable>
                    <selectables linebreak='yes'>
                      <selectable>after the TSF has successfully performed the validation process as specified in FCS_VAL_EXT.1</selectable>
                      <selectable>without validation taking place</selectable>
                  </selectables> 
                </title>
                <note role='application'><h:i><h:p>
                  Key Chaining is the method of using multiple layers of encryption keys to ultimately secure the BEV. The number of intermediate keys will vary – from one (e.g., taking the conditioned password authorization factor and directly using it as the BEV) to many. This applies to all keys that contribute to the ultimate wrapping or derivation of the BEV; including those in areas of protected storage (e.g. TPM stored keys, comparison values).
                </h:p><h:p>
                  Multiple key chains to the BEV are allowed, as long as all chains meet the key chain requirement.
                </h:p>
              <h:p>The BEV is considered to be equivalent to keying material and therefore additional checksums or similar values are not the BEV, even if they are sent with the BEV. 
                </h:p>
              <h:p>
                Once the ST author has selected a method to create the chain (either by deriving keys or unwrapping them or encrypting keys or using RSA Key Transport), they pull the appropriate requirement out of Appendix B. It is allowable for an implementation to use any or all methods.
              </h:p>
            <h:p>For FCS_KYC_EXT.1.2, the validation process is defined in FCS_VAL_EXT.1, Appendix B. If that selection is made by the ST author, then FCS_VAL_EXT.1 is included in the body of the ST.</h:p>
          <h:p>The method the TOE uses to chain keys and manage/protect them is described in the Key Management Description; see Appendix E for more information.</h:p></h:i></note>
                  <aactivity>
                      <TSS>The evaluator shall verify the TSS contains a high-level description of the BEV sizes
                        – that it supports BEV outputs of no fewer 128 bits for products that support only AES128, and no fewer than 256 bits for products that support AES-256.</TSS>
                      <Guidance>There are no AGD evaluation activities for this SFR.</Guidance>
                      <CustomEA name="KMD">
                        <h:p>The evaluator shall examine the KMD describes a high level description of the key hierarchy for all authorizations methods selected in FCS_AFA_EXT.1 that are used to protect the BEV. The evaluator shall examine the KMD to ensure it describes the key chain in detail. The description of the key chain shall be reviewed to ensure it maintains a chain of keys using key wrap or key derivation methods that meet FCS_COP.1/KeyWrap and FCS_KDF_EXT.1.</h:p>
                        <h:p>The evaluator shall examine the KMD to ensure that it describes how the key chain
                          process functions, such that it does not expose any material that might compromise any
                          key in the chain. (e.g. using a key directly as a compare value against a TPM) This
                          description must include a diagram illustrating the key hierarchy implemented and
                          detail where all keys and keying material is stored or what it is derived from. The
                          evaluator shall examine the key hierarchy to ensure that at no point the chain could be
                          broken without a cryptographic exhaust or the initial authorization value and the
                          effective strength of the BEV is maintained throughout the key chain.</h:p>
                        <h:p>The evaluator shall verify the KMD includes a description of the strength of keys
                          throughout the key chain.</h:p></CustomEA>                       
                      <Tests>There are no test evaluation activities for this SFR.</Tests>
                  </aactivity>
              </f-element>
              <audit-event/>
            </f-component>

            <f-component cc-id="fcs_pcc_ext.1" name="Cryptographic Password Construct and Conditioning" id="fcs-pcc-ext-1">
              <consistency-rationale/>
            <comp-lev> requires the TSF to accept passwords of a certain composition and condition them appropriately. </comp-lev>
            <management/>
            <audit/>
            <dependencies>FCS_COP.1/KeyedHash Cryptographic Operation (Keyed Hash Algorithm)</dependencies>
              <f-element id="fcs-pcc-ext-1-1">
                <title>
                  A password used by the TSF to generate a password authorization factor shall enable at least<assignable>positive integer of 64 or more</assignable> characters in the set of {upper case characters, lower case characters, numbers, and <assignable> other supported special characters</assignable>} and shall perform Password-based Key Derivation Functions in accordance with a specified cryptographic algorithm HMAC-<selectables><selectable>SHA-256</selectable><selectable>SHA384</selectable><selectable>SHA-512</selectable></selectables>, with 
                  <selectables><selectable><assignable>positive integer of 1000 or more</assignable> iterations</selectable></selectables>
                  <selectable><assignable>positive integer of 1 or more</assignable> and <assignable>positive integer of 10000 or more</assignable> subsequent rounds of AES operations with a device key and PBKDF2 output per FCS_COP.1/KeyEnc or FCS_COP.1/KeyEncap</selectable> and output cryptographic key sizes <selectables>
                    <selectable>128 bits</selectable>
                    <selectable>256 bits</selectable>
                  </selectables> that meet the following: [<h:i>NIST SP 800-132</h:i>].
                </title>
                <note role='application'><h:i>The password is represented on the host machine as a sequence of characters whose encoding depends on the TOE and the underlying OS. This sequence must be conditioned into a string of bits that forms the submask to be used as input into the key chain. Conditioning can be performed using one of the identified hash functions or the process described in NIST SP 800-132; the method used is selected by the ST author. If 800-132 conditioning is specified, then the ST author fills in the number of iterations that are performed. 800-132 also requires the use of a pseudo-random function (PRF) consisting of HMAC with an approved hash function. The ST author selects the hash function used which also includes the appropriate requirements for HMAC.</h:i></note>
                  <aactivity>
                    <TSS>The evaluator shall ensure the TSS describes the manner in which the TOE enforces
                      the construction of passwords, including the length, and requirements on characters
                      (number and type). The evaluator also verifies that the TSS provides a description of
                      how the password is conditioned and the evaluator ensures it satisfies the requirement.</TSS>
                    <Guidance>There are no AGD evaluation activities for this SFR.</Guidance>
                    <CustomEA name="KMD"><h:p>The evaluator shall examine the KMD to ensure that the formation of the BEV and
                      intermediary keys is described and that the key sizes match that selected by the ST
                      author.</h:p><h:p>The evaluator shall check that the KMD describes the method by which the
                        password/passphrase is first encoded and then fed to the SHA algorithm. The settings
                        for the algorithm (padding, blocking, etc.) shall be described, and the evaluator shall
                        verify that these are supported by the selections in this component as well as the
                        selections concerning the hash function itself. The evaluator shall verify that the KMD
                        contains a description of how the output of the hash function is used to form the
                        submask that will be input into the function and is the same length as the BEV as
                        specified above.</h:p></CustomEA>
                    <Tests>
                      <h:p>The evaluator shall also perform the following tests:</h:p>
                      <testlist>
                        <test>Ensure that the TOE supports passwords/passphrases of a minimum
                          length of 64 characters.</test>
                        <test>If the TOE supports a password/passphrase length up to a maximum
                          number of characters, n (which would be greater than 64), then ensure that the
                          TOE will not accept more than n characters.</test>
                        <test>Ensure that the TOE supports passwords consisting of all characters
                          assigned and supported by the ST author.</test>
                      </testlist></Tests>
                  </aactivity>
              </f-element>
              <audit-event/>
            </f-component>
            <f-component cc-id="fcs_rbg_ext.1" name="Cryptographic Operation (Random Bit Generation)" id="fcs-rbg-ext-1">
              <consistency-rationale/>
              <comp-lev>requires random bit generation to be performed in accordance with selected standards and seeded by an entropy source.</comp-lev>
              <management/>
              <audit>The following actions should be auditable if FAU_GEN Security audit data generation is included in the PP/ST:
                <h:ul><h:li>Failure of the randomization process</h:li></h:ul>
              </audit>
              <dependencies>
                <h:p>FCS_COP.1/Hash Cryptographic Operation (Hash Algorithm),</h:p>
                <h:p>FCS_COP.1/KeyedHash Cryptographic Operation (Keyed Hash Algorithm)</h:p>
              </dependencies>
              <f-element id="fcs-rbg-ext-1-1">
                <title>
                  The TSF shall perform all deterministic random bit generation services in accordance with <selectables><selectable>ISO/IEC 18031:2011</selectable><selectable id='fcs-rbg-ext-1-1-nist'>[NIST SP 800-90A]</selectable></selectables> using <selectables><selectable>Hash_DRBG (any)</selectable><selectable>HMAC_DRBG (any)</selectable><selectable>CTR_DRBG (AES)</selectable></selectables>.
                </title>
                  <aactivity><no-tests/></aactivity>
              </f-element>
              <f-element id="fcs-rbg-ext-1-2">
                <title>
                  The deterministic RBG shall be seeded by at least one entropy source that accumulates entropy from <selectables linebreak="yes">
                    <selectable><assignable>number of software-based sources</assignable>software-based noise source(s)</selectable>
                    <selectable><assignable>number of hardware-based sources</assignable>hardware-based noise source(s)</selectable>
                  </selectables> with a minimum of <selectables><selectable>128 bits</selectable><selectable>256 bits</selectable></selectables> of entropy at least equal to the greatest security strength, according to ISO/IEC 18031:2011 Table C.1 “Security Strength Table for Hash Functions”, of the keys and hashes that it will generate.
                </title>
                <note role="application"><h:i>
                  <h:p>ISO/IEC 18031:2011 contains different methods of generating random numbers; each of these, in turn, depends on underlying cryptographic primitives (hash functions/ciphers). The ST author will select the function used and include the specific underlying cryptographic primitives used in the requirement. While any of the identified hash functions (SHA-256, SHA-384, SHA-512) are allowed for Hash_DRBG or HMAC_DRBG, only AES-based implementations for CTR_DRBG are allowed. Table C.2 in ISO/IEC 18031:2011 provides an identification of Security strengths, Entropy and Seed length requirements for the AES-128 and 256 Block Cipher.</h:p>
                  <h:p>The CTR_DRBG in ISO/IEC 18031:2011 requires using derivation function, whereas NIST SP 800-90A does not. Either model is acceptable. In the first selection in FCS_RBG_EXT.1.1, the ST author choses the standard to which the TSF is compliant.</h:p>
                  <h:p>In the first selection in FCS_RBG_EXT.1.2 the ST author fills in how many entropy sources are used for each type of entropy source they employ. It should be noted that a combination of hardware and software based noise sources is acceptable.</h:p>
                  <h:p>It should be noted that the entropy source is considered to be a part of the DRBG and if the DRBG is included in the TOE, the developer is required to provide the entropy description outlined in Appendix D. The documentation *and tests* required in the Evaluation Activity for this element necessarily cover each source indicated in FCS_RBG_EXT.1.2. Individual contributions to the entropy pool may be combined to provide the minimum amount of entropy as long as the Entropy Documentation demonstrates that entropy from each of these individual sources is generated independently.</h:p>
                   </h:i></note>
                  <aactivity>
                    <TSS>
                      For any RBG services provided by a third party, the evaluator shall ensure the TSS
                      includes a statement about the expected amount of entropy received from such a source,
                      and a full description of the processing of the output of the third-party source. The
                      evaluator shall verify that this statement is consistent with the selection made in
                      FCS_RBG_EXT.1.2 for the seeding of the DRBG. If the ST specifies more than one
                      DRBG, the evaluator shall examine the TSS to verify that it identifies the usage of each
                      DRBG mechanism.</TSS>
                    <Guidance>
                      The evaluator shall verify that the AGD guidance instructs the administrator how to
                      configure the TOE to use the selected DRBG mechanism(s), if necessary, and provides
                      information regarding how to instantiate/call the DRBG for RBG services needed in
                      this cPP.</Guidance>
                    <CustomEA name="KMD">There are no KMD evaluation activities for this SFR.</CustomEA>
                    <Tests>
                        <h:p>The evaluator shall perform 15 trials for the RNG implementation. If the RNG is
                          configurable by the TOE, the evaluator shall perform 15 trials for each configuration.
                          The evaluator shall verify that the instructions in the operational guidance for
                          configuration of the RNG are valid.</h:p>
                        <h:p>If the RNG has prediction resistance enabled, each trial consists of (1) instantiate
                          DRBG, (2) generate the first block of random bits (3) generate a second block of
                          random bits (4) uninstantiate. The evaluator verifies that the second block of random
                          bits is the expected value. The evaluator shall generate eight input values for each trial.
                          The first is a count (0 – 14). The next three are entropy input, nonce, and personalization
                          string for the instantiate operation. The next two are additional input and entropy input
                          for the first call to generate. The final two are additional input and entropy input for the
                          second call to generate. These values are randomly generated. “Generate one block of
                          random bits” means to generate random bits with number of returned bits equal to the
                          Output Block Length (as defined in NIST SP800-90A).</h:p>
                        <h:p>If the RNG does not have prediction resistance, each trial consists of (1) instantiate
                          DRBG, (2) generate the first block of random bits (3) reseed, (4) generate a second
                          block of random bits (5) uninstantiate. The evaluator verifies that the second block of
                          random bits is the expected value. The evaluator shall generate eight input values for
                          each trial. The first is a count (0 – 14). The next three are entropy input, nonce, and
                          personalization string for the instantiate operation. The fifth value is additional input to
                          the first call to generate. The sixth and seventh are additional input and entropy input
                          to the call to reseed. The final value is additional input to the second generate call.</h:p>
                        <h:p>The following paragraphs contain more information on some of the input values to be
                          generated/selected by the evaluator.</h:p>
                        <h:p>Entropy input: the length of the entropy input value must equal the seed length.</h:p>
                        <h:p>Nonce: If a nonce is supported (CTR_DRBG with no Derivation Function does not use
                          a nonce), the nonce bit length is one-half the seed length.</h:p>
                        <h:p>Personalization string: The length of the personalization string must be &lt;= seed length.
                        If the implementation only supports one personalization string length, then the same
                        length can be used for both values. If more than one string length is support, the
                        evaluator shall use personalization strings of two different lengths. If the
                        implementation does not use a personalization string, no value needs to be supplied.</h:p>
                        <h:p>Additional input: the additional input bit lengths have the same defaults and restrictions
                          as the personalization string lengths.</h:p>
                    </Tests>
                    </aactivity>
              </f-element>
              <audit-event/>
            </f-component>
            <f-component cc-id="fcs_smc_ext.1" name="Submask Combining " id="fcs-smc-ext-1">
              <consistency-rationale/>
              <comp-lev>requires the TSF to combine the submasks in a predictable fashion.</comp-lev>
              <management/>
              <audit/>
              <dependencies>FCS_COP.1/Hash Cryptographic Operation (Hash Algorithm)</dependencies>
              <f-element id="fcs-smc-ext-1-1">
                <title>
                  The TSF shall combine submasks using the following method <selectables><selectable>exclusive OR (XOR)</selectable><selectable>SHA-256</selectable><selectable>SHA-384</selectable><selectable>SHA-521</selectable></selectables> to generate an [<h:i>intermediary key or BEV</h:i>].
                </title>
                <note role='application'><h:i>
                  This requirement specifies the way that a product may combine the various submasks by using either an XOR or an approved SHA-hash. The approved hash functions are captured in FCS_COP.1/Hash.
                </h:i></note>
                  <aactivity>
                    <TSS>If the submasks produced from the authorization factors are XORed together to form
                      the BEV or intermediate key, the TSS section shall identify how this is performed (e.g.,
                      if there are ordering requirements, checks performed, etc.). The evaluator shall also
                      confirm that the TSS describes how the length of the output produced is at least the
                      same as that of the BEV.</TSS>
                      <Guidance>There are no AGD evaluation activities for this SFR.</Guidance>
                      <CustomEA name="KMD">The evaluator shall review the KMD to ensure that an approved combination is used
                        and does not result in the weakening or exposure of key material.</CustomEA>
                      <Tests>The evaluator shall perform the following test:<testlist>
                        <test>(conditional): If there is more than one authorization factor, ensure that failure
                          to supply a required authorization factor does not result in access to the encrypted data.</test>
                      </testlist></Tests>
                  </aactivity>
              </f-element>
              <audit-event/>
            </f-component>
            <f-component cc-id="fcs_sni_ext.1" name="Cryptographic Operation (Salt, Nonce, and Initialization Vector Generation)" id="fcs_sni_ext.1">
              <consistency-rationale/>
              <comp-lev>requires the generation of salts, nonces, and IVs to be used by the cryptographic components of the TOE to be performed in the specified manner. </comp-lev>
              <management/>
              <audit/>
              <dependencies>FCS_RBG_EXT.1 Cryptographic Operation (Random Bit Generation)</dependencies>
              <f-element id="fcs-sni-ext-1-1">
                <title>
                  The TSF shall <selectables>
                    <selectable>use no salts</selectable>
                    <selectable>use salts that are generated by a 
                      <selectables>
                        <selectable>DRBG as specified in FCS_RBG_EXT.1</selectable>
                        <selectable>DRBG provided by the host platform</selectable>
                      </selectables>
                    </selectable>
                  </selectables>.
                </title>
                  <aactivity><no-tests/></aactivity>
              </f-element>
              <f-element id="fcs-sni-ext-1-2">
                <title>The TSF shall use 
                  <selectables>
                    <selectable>no nonces</selectable>
                    <selectable>unique nonces with a minimum size of [<h:i>64</h:i>] bits</selectable>
                  </selectables>.</title>
                <aactivity><no-tests/></aactivity>
              </f-element>
              <f-element id="fcs-sni-ext-1-3">
                <title>The TSF shall <selectables><selectable>use no IVs</selectable><selectable></selectables>create IVs in the following manner <selectables linebreak='yes'>
                  <selectable>CBC: IVs shall be non-repeating and unpredictable</selectable>
                  <selectable>CCM: Nonce shall be non-repeating and unpredictable</selectable>
                  <selectable>XTS: No IV. Tweak values shall be non-negative integers, assigned consecutively, and starting at an arbitrary non-negative integer;</selectable>
                  <selectable>GCM: IV shall be non-repeating. The number of invocations of GCM shall not exceed 2^32 for a given secret key</selectable>
                </selectables></selectable></selectables>.</title>
                <note role='application'><h:i>This requirement covers several important factors – the salt must be random, but the nonces only have to be unique. FCS_SNI_EXT.1.3 specifies how the IV should be handled for each encryption mode. CBC, XTS, and GCM are allowed for AES encryption of the data. AES-CCM is an allowed mode for Key Wrapping.</h:i></note>
                <aactivity>
                    <TSS>
                      <h:p>If salts are used, the evaluator shall ensure the TSS describes how salts are generated. The evaluator shall confirm that the salt is generating using an RBG described in FCS_RBG_EXT.1 or by the Operational Environment. If external function is used for this purpose, the TSS should include the specific API that is called with inputs.</h:p>
                      <h:p>If IVs or nonces are used, the evaluator shall ensure the TSS describes how nonces are created uniquely and how IVs and tweaks are handled (based on the AES mode). The evaluator shall confirm that the nonces are unique and the IVs and tweaks meet the stated requirements.</h:p></TSS>
                    <Guidance>There are no AGD evaluation activities for this SFR.</Guidance>
                    <CustomEA name="KMD">There are no KMD evaluation activities for this SFR.</CustomEA>
                    <Tests>There are no test evaluation activities for this SFR.</Tests>
                </aactivity>
              </f-element>
              <audit-event/>
            </f-component>
            <f-component cc-id="fcs_val_ext.1" name="Validation " id="fcs-val-ext-1">
              <consistency-rationale/>
              <comp-lev>requires the TSF to validate submasks and BEVs by one or more of the specified methods.</comp-lev>
              <management/>
              <audit/>
              <dependencies>
                <h:p>FCS_COP.1/Hash Cryptographic Operation (Hash Algorithm),</h:p>
                <h:p>FCS_COP.1/KeyedHash Cryptographic Operation (Keyed Hash Algorithm),</h:p>
                <h:p>FCS_COP.1/KeyWrap Cryptographic Operation (Key Wrapping),</h:p>
                <h:p>FCS_COP.1/SKC Cryptographic Operation (AES Data Encryption/Decryption)</h:p>
              </dependencies>
              <f-element id="fcs-val-ext-1-1">
                <title>
                  The TSF shall perform validation of the <selectables>
                    <selectable>submask</selectable>
                    <selectable>intermediate key</selectable>
                    <selectable>BEV</selectable>
                  </selectables>
                  using the following method(s): <selectables linebreak="yes">
                    <selectable>key wrap as specified in FCS_COP.1/KeyWrap;</selectable>
                    <selectable>hash the <selectables>
                      <selectable>submask</selectable>
                      <selectable>intermediate key</selectable>
                      <selectable>BEV</selectable>
                    </selectables>
                    as specified in <selectables>
                      <selectable id="fcs-val-ext-1-1-hash">FCS_COP.1/Hash</selectable>
                      <selectable id="fcs-val-ext-1-1-keyhash">FCS_COP.1/KeyedHash</selectable>
                    </selectables> and compare it to a stored hashed <selectables><selectable>submask</selectable><selectable> intermediate key</selectable><selectable>BEV</selectable></selectables>;</selectable>
                    <selectable id="fcs-val-ext-1-1-decr">decrypt a known value using the <selectables><selectable>submask</selectable><selectable>intermediate key</selectable><selectable>BEV</selectable></selectables> specified in FCS_COP.1/SKC and compare it against a stored known value </selectable>
                  </selectables>.
                </title>
                
                  <aactivity>
                      <TSS>
                        <h:p>The evaluator shall examine the TSS to determine which authorization factors support
                          validation.</h:p>
                        <h:p>The evaluator shall examine the TSS to review a high-level description if multiple
                          submasks are used within the TOE, how the submasks are validated (e.g., each submask
                          validated before combining, once combined validation takes place).</h:p></TSS>
                      <Guidance>
                        <h:p>(conditional) If the validation functionality is configurable, the evaluator shall examine
                          the operational guidance to ensure it describes how to configure the TOE to ensure the
                          limits regarding validation attempts can be established.</h:p>
                        <h:p>(conditional) If the validation functionality is specified by the ST author, the evaluator
                          shall examine the operational guidance to ensure that it states the values that the TOE
                          uses for limits regarding validation attempts.</h:p></Guidance>
                      <CustomEA name="KMD">
                        <h:p>The evaluator shall examine the KMD to verify that it described the method the TOE
                          employs to limit the number of consecutively failed authorization attempts.</h:p>
                        <h:p>The evaluator shall examine the vendor’s KMD to ensure it describes how validation
                          is performed. The description of the validation process in the KMD provides detailed
                          information how the TOE validates the submasks. The KMD describes how the process
                          works, such that it does not expose any material that might compromise the submask(s).</h:p></CustomEA>
                      <Tests>
                        The evaluator shall perform the following tests:
                        <testlist>
                          <test>The evaluator shall determine the limit on the average rate of the number of
                            consecutive failed authorization attempts. The evaluator will test the TOE by entering
                            that number of incorrect authorization factors in consecutive attempts to access the
                            protected data. If the limit mechanism includes any “lockout” period, the time period
                            tested should include at least one such period. Then the evaluator will verify that the
                            TOE behaves as described in the TSS.</test>
                          <test>For each validated authorization factor, ensure that when the user provides an
                            incorrect authorization factor, the TOE prevents the BEV from being forwarded outside
                            the TOE (e.g., to the EE).</test>
                        </testlist></Tests>
                  </aactivity>
              </f-element>
              <f-element id="fcs-val-ext-1-2">
                <title>
                  The TSF shall require validation of the [<h:i>BEV</h:i>] prior to [<h:i>forwarding the BEV to the EE</h:i>].
                </title>
                <aactivity><no-tests/></aactivity>
              </f-element>
              <f-element id="fcs-val-ext-1-3">
                <title>The TSF shall 
                  <selectables linebreak="yes">
                    <selectable>perform a key sanitization of the DEK upon a 
                      <selectables>
                        <selectable>configurable number</selectable>
                        <selectable><assignable>ST author specified number</assignable></selectable>
                      </selectables>
                      of consecutive failed validation attempts
                    </selectable>
                    <selectable>institute a delay such that only <assignable>ST author specified number of attempts</assignable> can be made within a 24 hour period</selectable>
                    <selectable>block validation after <assignable>ST author specified number of attempts</assignable> of consecutive failed validation attempts</selectable>
                    <selectable>require power cycle/reset the TOE after <assignable>ST author specified number of attempts</assignable> of consecutive failed validation attempts</selectable>
                  </selectables></title>
                <note role="application"><h:i>
                  <h:p>
                    The purpose of performing secure validation is to not expose any material that might compromise the submask(s). For the selections in FCS_VAL_EXT.1.1, the ST author must clarify in the KMD which specific entities are referred to in this SFR if multiple entities of a type exist.
                  </h:p>
                  <h:p>The TOE validates the submask(s) (e.g., authorization factor(s)) prior to presenting the BEV to the EE. When a password is used as an authorization factor, it is conditioned before any attempts to validate. In cases where validation of the authorization factor(s) fails, the product will not forward a BEV to EE. </h:p>
                  <h:p>When the key wrap in FCS_COP.1/KeyWrap is used, the validation is performed inherently.</h:p>
                  <h:p>The delay must be enforced by the TOE, but this requirement is not intended to address attacks that bypass the product (e.g. attacker obtains hash value or “known” crypto value and mounts attacks outside of the TOE, such as a third party password crackers). The cryptographic functions (i.e., hash, decryption) performed are those specified in FCS_COP.1/Hash, FCS_COP.1/KeyedHash, and FCS_COP.1/SKC.</h:p>
                  <h:p>The ST author may need to iterate this requirement if multiple authentication factors are used, and either different methods are used to validate, or in some cases one or more authentication factors may be validated, and one or more are not validated.</h:p>
                </h:i></note>
              </f-element>
              <audit-event/>
            </f-component>

            
            
            
            

      </section>
      <section title="Security Management (FMT)" id="FMT">
        <f-component cc-id="fmt_mof.1" name="Management of Functions Behavior" id="fmt-mof-1-1">
          <f-element id="fmt-mof-1-1">
            <title>
              The TSF shall restrict the ability to [<h:i>modify the behaviour of</h:i>] the functions [<h:i>use of Compliant power saving state</h:i>] to [<h:i>authorized users</h:i>].
            </title>
            <note role='application'><h:i>“Modify the behaviour of” refers to any change in how or when a Compliant power state may occur. Only privileged users are allowed to enable or disable Compliant power saving state(s) via modification of “use of Compliant power saving state” function.</h:i></note>
              <aactivity>
                  <TSS>If support for Compliant power saving state(s) are claimed in the ST, the evaluator shall
                    ensure the TSS describes how these are managed and shall ensure that TSS describes
                    how only privileged users (administrators) are allowed to manage the states.</TSS>
                  <Guidance>The evaluator to check if guidance documentation describes which authorization
                    factors are required to change Compliant power saving state behavior and properties.</Guidance>
                  <CustomEA name="KMD">There are no KMD evaluation activities for this SFR.</CustomEA>
                  <Tests>The evaluator shall perform the following tests:
                    <testlist>
                      <test>(conditional): If the product supports changes to compliant power saving states, the evaluator presents a privileged authorization credential to the TSF and validates that changes to Compliant power saving state behavior and properties are
                        allowed.</test>
                        <test>(conditional): If the product supports changes to compliant power saving states, the evaluator presents a non-privileged authorization credential to the TSF and validates that changes to Compliant power saving state behavior are not allowed.
                          </test>
                    </testlist></Tests>
              </aactivity>
          </f-element>

          <audit-event/>
        </f-component>
        <f-component cc-id="fmt_smf.1" name="Specification of Management Functions" id="fmt-smf-1">
        <f-element id="fmt-smf-1">
          <title>
          <h:b>Refinement:</h:b> The TSF shall be capable of performing the following management functions: [
            <h:i><h:lo type='a'>
              <h:li>forwarding requests to change the DEK to the EE</h:li>
              <h:li>forwarding requests to cryptographically erase the DEK to the EE</h:li>
              <h:li>allowing authorized users to change authorization values or set of authorization values used within the supported authorization method,</h:li>
              <h:li>initiate TOE firmware/software updates</h:li>
              <h:li><h:b><selectables>
                <selectable>no other functions</selectable>
                <selectable>specify the power saving state properties</selectable>
                <selectable> define the allowable power saving states</selectable>
                <selectable>generate authorization factors using the TSF RBG</selectable>
                <selectable>configure authorization factors</selectable>
                <selectable>configure cryptographic functionality</selectable>
                <selectable>disable key recovery functionality</selectable>
                <selectable>securely update the public key needed for trusted update</selectable>
                <selectable>configure the number of failed validation attempts required to trigger corrective behavior</selectable>
                <selectable>configure the corrective behavior to issue in the event of an excessive number of failed validation attempts</selectable>
                <selectable><assignable>other management functions provided by the TSF</assignable></selectable>
              </selectables></h:b></h:li>
            </h:lo></h:i> 
            
          </title>
          <note role='application'><h:i>
            <h:p>The intent of this requirement is to express the management capabilities that the TOE possesses. This means that the TOE must be able to perform the listed functions. Item (e) is used to specify functionality that may be included in the TOE, but is not required to conform to the cPP. “Configure cryptographic functionality” could include key management functions; for example, the BEV will be wrapped or encrypted, and the EE will need to unwrap or decrypt the BEV. In item e, if no other management functions are provided (or claimed), then “no other functions” should be selected</h:p>
            <h:p>Changing the DEK would require the data to be re-encrypted with the new DEK, but allows the user the ability to generate new DEKs.</h:p>
            <h:p>For the purposes of this document, key sanitization means to destroy the DEK, using one of the approved destruction methods. In some implementations, changing the DEK could be the same functionality as cryptographically erasing the DEK.</h:p>
          </h:i></note>
            <aactivity>
                <TSS>
                  <h:p>If item a&#41; is selected in FMT_SMF.1.1: The evaluator shall ensure the TSS describes
                    how the TOE sends the request to the EE to change the DEK.</h:p>
                  <h:p>If item b&#41; is selected in FMT_SMF.1.1: The evaluator shall ensure the TSS describes
                    how the TOE sends the request to the EE to cryptographically erase the DEK. </h:p>
                  <h:p>If item c&#41; is selected in FMT_SMF.1.1: The evaluator shall ensure the TSS describes
                    the methods by which users may change the set of all authorization factor values
                    supported.</h:p>
                  <h:p>If item d&#41; is selected in FMT_SMF.1.1: The evaluator shall ensure the TSS describes
                    the process to initiate TOE firmware/software updates. </h:p>
                  <h:p>If item e&#41; is selected in FMT_SMF.1.1: If power saving states can be managed, the
                    evaluator shall ensure that the TSS describes how this is performed, including how the
                    TOE supports disabling certain power saving states if more than one are supported. If
                    additional management functions are claimed in the ST, the evaluator shall ensure the
                    TSS describes the additional functions.</h:p>
                </TSS>
                <Guidance>
                  <h:p>If item a&#41; and/or b&#41; is selected in FMT_SMF.1.1: The evaluator shall examine the
                    operational guidance to ensure that it describes how the functions for A and B can be
                    initiated by the user.</h:p>
                  <h:p>If item c&#41; is selected in FMT_SMF.1.1: The evaluator shall examine the operational
                    guidance to ensure that it describes how selected authorization factor values are
                    changed. </h:p>
                  <h:p>If item d&#41; is selected in FMT_SMF.1.1: The evaluator shall examine the operational
                    guidance to ensure that it describes how to initiate TOE firmware/software updates.</h:p>
                  <h:p>If item e&#41; is selected in FMT_SMF.1.1: Default Authorization Factors: It may be the
                    case that the TOE arrives with default authorization factors in place. If it does, then the
                    selection in section E must be made so that there is a mechanism to change these
                    authorization factors. The operational guidance shall describe the method by which the
                    user changes these factors when they are taking ownership of the device. The TSS shall
                    describe the default authorization factors that exist. </h:p>
                  <h:p>Disable Key Recovery: The guidance for disabling this capability shall be described in
                    the AGD documentation.</h:p>
                  <h:p>Power Saving: The guidance shall describe the power saving states that are supported
                    by the TSF, how these states are applied, how to configure when these states are applied
                    (if applicable), and how to enable/disable the use of specific power saving states (if
                    applicable).</h:p>
                </Guidance>
                <CustomEA name="KMD">There are no KMD evaluation activities for this SFR</CustomEA>
                <Tests>
                  
                  <h:p>
                  If item a&#41; and/or b&#41; is selected in FMT_SMF.1.1: The evaluator shall verify that the
                  TOE has the functionality to forward a command to the EE to change and
                  cryptographically erase the DEK. The actual testing of the cryptographic erase will take
                  place in the EE.
                  </h:p>
                  <h:p>If item c&#41; is selected in FMT_SMF.1.1: The evaluator shall initialize the TOE such that
                    it requires the user to input an authorization factor in order to access encrypted data.</h:p>
                  <h:p>
                    <testlist><test>The evaluator shall first provision user authorization factors, and then verify
                      all authorization values supported allow the user access to the encrypted data. Then
                      the evaluator shall exercise the management functions to change a user’s
                      authorization factor values to a new one. Then he or she will verify that the TOE
                      denies access to the user’s encrypted data when he or she uses the old or original
                      authorization factor values to gain access.</test>
                    
                  </testlist>
                  </h:p>
                  <h:p>If item d&#41; is selected in FMT_SMF.1.1: The evaluator shall verify that the TOE has the
                    functionality to initiate TOE firmware/software updates.</h:p>
                    <h:p>If item e&#41; is selected in FMT_SMF.1.1: If additional management functions are
                      claimed, the evaluator shall verify that the additional features function as described. </h:p>
                  <h:p><testlist>
                    <test>(conditional): If the TOE provides default authorization values, the
                      evaluator shall change these values in the course of taking ownership of the device
                      as described in the operational guidance. The evaluator shall then confirm that the
                      (old) authorization values are no longer valid for data access.</test>
                    <test>(conditional): If the TOE provides key recovery capability whose effects are
                      visible at the TOE interface, then the evaluator shall devise a test that ensures that
                      the key recovery capability has been or can be disabled following the guidance
                      provided by the vendor.</test>
                    <test>(conditional): If the TOE provides the ability to configure the power saving
                      states that are entered by certain events, the evaluator shall devise a test that causes
                      the TOE to enter a specific power saving state, configure the TSF so that this
                      activity causes a different state to be entered, repeat the activity, and observe the
                      new state is entered as configured.</test>
                    <test>(conditional): If the TOE provides the ability to disable the use of one or
                      more power saving states, the evaluator shall devise a test that enables all supported
                      power saving states and demonstrates that the TOE can enter into each of these
                      states. The evaluator shall then disable the supported power saving states one by
                      one, repeating the same set of actions that were performed at the start of the test,
                      and observe each time that when a power saving state is configured to no longer be
                      used, none of the behavior causes the disabled state to be entered.</test>
                  </testlist></h:p>

                </Tests>
            </aactivity>
        </f-element>
        <audit-event/>
      </f-component>
      <f-component cc-id="fmt_smr.1" name="Security Roles" id="fmt-smr-1">
        <f-element id="fmt-smr-1-1">
          <title>
            The TSF shall maintain the roles [<h:i>authorized user</h:i>].
          </title>
            <aactivity><no-tests/></aactivity>
        </f-element>
        <f-element id="fmt-smr-1-2">
          <title>
            The TSF shall be able to associate users with roles.
          </title>
            
            <aactivity>
              <TSS>There are no TSS evaluation activities for this SFR. Evaluation of this SFR is performed as part of evaluating FMT_MOF.1 and FMT_SMF.1.</TSS>
              <Guidance>There are no guidance evaluation activities for this SFR. Evaluation of this SFR is performed as part of evaluating FMT_MOF.1 and FMT_SMF.1.</Guidance>
              <CustomEA name="KMD">There are no KMD evaluation activities for this SFR.</CustomEA>
              <Tests>There are no test evaluation activities for this SFR. Evaluation of this SFR is performed
                as part of evaluating FMT_MOF.1 and FMT_SMF.1.</Tests>   
            </aactivity>
        </f-element>
        <audit-event/>
      </f-component>
      </section>
      <section title="Protection of the TSF (FPT)" id="fpt">
        <ext-comp-def title="Key and Key Material Protection" fam-id="FPT_KYP_EXT">
          <fam-behavior>This family requires that key and key material be protected if and when written to non-volatile storage.
            </fam-behavior>
        </ext-comp-def>
        <ext-comp-def title="Power Management" fam-id="FPT_PWR_EXT">
          <fam-behavior>This family defines secure behavior of the TSF when the TOE supports multiple power saving states. The use of Compliant power saving states (i.e. power saving states that purge security relevant data upon entry) is essential for ensuring that state transitions cannot be used as attack vectors to bypass TOE self-protection mechanisms.
            </fam-behavior>
        </ext-comp-def>
        <ext-comp-def title="TSF Testing" fam-id="FPT_TST_EXT">
          <fam-behavior>Components in this family address the requirements for self-testing the TSF for selected correct operation.
            </fam-behavior>
        </ext-comp-def>
        <ext-comp-def title="Trusted Update" fam-id="FPT_TUD_EXT">
          <fam-behavior>Components in this family address the requirements for updating the TOE firmware and/or software.
            </fam-behavior>
        </ext-comp-def>
        <f-component cc-id="fpt_kyc_ext.2" name="Key Chaining (Recipient) " id="fpt-kyc-ext-2" status="invisible">
          <consistency-rationale/>
          <comp-lev><h:p>requires the TSF to be able to accept a BEV that is then chained to a DEK used by the TSF through some method.</h:p>
          <h:p> Note that this cPP does not include FCS_KYC_EXT.2; it is only included here to provide a complete definition of the FCS_KYC_EXT family.</h:p></comp-lev>
          <management/>
          <audit/>
          <dependencies/>
          <f-element id="fpt-kyc-ext-2-1">
            <title>The TSF shall accept a BEV of at least <selectables><selectable>128 bits</selectable><selectable>256 bits</selectable></selectables> from <assignable>one or more external entities</assignable>.</title>
            <aactivity><no-tests/></aactivity>
          </f-element>
          <f-element id="fpt-kyc-ext-2-2">
            <title>
              The TSF shall maintain a chain of intermediary keys originating from the BEV to the DEK using the following method(s): <selectables linebreak="yes">
                <selectable>asymmetric key generation as specified in FCS_CKM.1/AKG</selectable>
                <selectable id="fpt-kyc-ext-2-2-sel-2">symmetric key generation as specified in FCS_CKM.1/SKG</selectable>
                <selectable>key derivation as specified in FCS_KDF_EXT.1,</selectable>
                <selectable>key wrapping as specified in FCS_COP.1/KeyWrap,</selectable>
                <selectable>key transport as specified in FCS_COP.1/KeyEncap,</selectable>
                <selectable>key encryption as specified in FCS_COP.1/KeyEnc</selectable>
              </selectables> while maintaining an effective strength of <selectables>
                <selectable>128 bits</selectable>
                <selectable>256 bits</selectable>
              </selectables>
              while maintaining an effective strength of <selectables><selectable>128 bits</selectable>
                <selectable>256 bits</selectable></selectables> for symmetric keys and an effective strength of <selectables><selectable>not applicable</selectable><selectable>112 bits</selectable><selectable>128 bits</selectable><selectable>192 bits</selectable><selectable>256 bits</selectable></selectables> for asymmetric keys.
            </title>
            <note role="application"><h:i>Key Chaining is the method of using multiple layers of encryption keys to ultimately secure the protected data encrypted on the drive. The number of intermediate keys will vary – from one (e.g., using the BEV as a key encrypting key (KEK)) to many. This applies to all keys that contribute to the ultimate wrapping or derivation of the DEK; including those in areas of protected storage (e.g. TPM stored keys, comparison values). </h:i></note>
            <aactivity><no-tests/></aactivity>
          </f-element>
          <audit-event/>
        </f-component>
        <f-component cc-id="fpt_kyp_ext.1" name="Protection of Key and Key Material " id="fpt-kyp-ext-1">
          <consistency-rationale/>
          <comp-lev>requires the TSF to ensure that no plaintext key or key material are written to non-volatile storage.</comp-lev>
          <management/>
          <audit/>
          <dependencies>
            <h:p>FCS_COP.1/KeyWrap Cryptographic Operation (Key Wrapping),</h:p>
            <h:p>FCS_COP.1/KeyEncap Cryptographic Operation (Key Transport),</h:p>
            <h:p>FCS_COP.1/KeyEnc Cryptographic Operation (Key Encryption),</h:p>
            <h:p>FCS_KYC_EXT.1 Key Chaining (Initiator),</h:p>
            <h:p>FCS_KYC_EXT.2 Key Chaining (Recipient)</h:p>
            <h:p>FCS_SMC_EXT.1 Submask Combining</h:p>
            <comment> FCS_KYC_EXT.2 needs to be listed within the ECD but it does not seem to show up properly even thought the invisible status is being used. </comment>
          </dependencies>
          <f-element id="fpt-kyp-ext-1-1">
            <title>
              The TSF shall <selectables linebreak="yes">
                <selectable>not store keys in non-volatile memory</selectable>
                <selectable>only store keys in non-volatile memory when wrapped, as specified in FCS_COP.1/KeyWrap, or encrypted, as specified in FCS_COP.1/KeyEnc or FCS_COP.1/KeyEncap</selectable>
                <selectable>only store plaintext keys that meet any one of the following criteria <selectables>
                  <selectable>the plaintext key is not part of the key chain as specified in FCS_KYC_EXT.1</selectable>
                  <selectable>the plaintext key will no longer provide access to the encrypted data after initial provisioning</selectable>
                  <selectable>the plaintext key is a key split that is combined as specified in FCS_SMC_EXT.1, and the other half of the key split is <selectables linebreak="yes">
                    <selectable>wrapped as specified in FCS_COP.1/KeyWrap</selectable>
                    <selectable>encrypted as specified in FCS_COP.1/KeyEnc or FCS_COP.1/KeyEncap</selectable>
                    <selectable>derived and not stored in non-volatile memory</selectable>
                  </selectables></selectable>
                  <selectable>the non-volatile memory the key is stored on is located in an external storage device for use as an authorization factor</selectable>
                  <selectable>the plaintext key is <selectables linebreak="yes">
                    <selectable>used to wrap a key as specified in FCS_COP.1/KeyWrap</selectable>
                    <selectable>used to encrypt a key as specified in FCS_COP.1/KeyEnc or FCS_COP.1/KeyEncap</selectable></selectables>
                     that is <selectables linebreak='yes'>
                      <selectable>already wrapped as specified in FCS_COP.1/KeyWrap,</selectable>
                      <selectable>already encrypted as specified in FCS_COP.1/KeyEnc or FCS_COP.1/KeyEncap,</selectable>
                      <selectable>derived and not stored in non-volatile memory</selectable>
                     </selectables>
                 </selectable>
                  <selectable></selectable>
                </selectables>
                </selectable>
                

              </selectables>.
            </title>
            <note role='application'><h:i>The plaintext key storage in non-volatile memory is allowed for several reasons. If the keys exist within protected memory that is not user accessible on the TOE or OE, the only methods that allow it to play a security relevant role for protecting the BEV or the DEK are if it is a key split or providing additional layers of wrapping or encryption on keys that have already been protected.</h:i></note>
             

              <aactivity>
                <TSS>The evaluator shall examine the TSS and verify it identifies the methods used to protect keys stored in non-volatile memory.</TSS>
                <Guidance>There are no AGD evaluation activities for this SFR.</Guidance>
                <CustomEA name="KMD">
                    <h:p>The evaluator shall verify the KMD to ensure it describes the storage location of all
                      keys and the protection of all keys stored in non-volatile memory. The description of
                      the key chain shall be reviewed to ensure the selected method is followed for the storage
                      of wrapped or encrypted keys in non-volatile memory and plaintext keys in non-volatile
                      memory meet one of the criteria for storage.</h:p></CustomEA>
                <Tests>
                  There are no test evaluation activities for this SFR.</Tests>
                </aactivity>
          </f-element>
          <audit-event/>
        </f-component>
        <f-component cc-id="fpt_pwr_ext.1" name="Power Saving States" id="fpt-pwr-ext-1">
          <consistency-rationale/>
          <comp-lev>defines the Compliant power saving states that are implemented by the TSF.</comp-lev>
          <management>The following actions could be considered for the management functions in FMT:<h:ul>
            <h:li>Enable or disable the use of individual power saving states</h:li>
            <h:li>Specify one or more power saving state configurations</h:li>
          </h:ul></management>
          <audit>There are no auditable events foreseen.</audit>
          <dependencies/>
          <f-element id="fpt-pwr-ext-1-1">
            <title>
              The TSF shall define the following Compliant power saving states: <selectables choose-one-of="yes">
                <selectable>S3</selectable>
                <selectable>S4</selectable>
                <selectable>G2(S5)</selectable>
                <selectable>G3</selectable>
                <selectable><assignable>other power saving states</assignable></selectable>
              </selectables>
            </title>
            <note role='application'><h:i>Power saving states S3, S4, G2(S5), G3 are defined by the Advanced Configuration and Power Interface (ACPI) standard.</h:i></note>
            <aactivity>
            <TSS>The evaluator shall validate the TSS contains a list of Compliant power saving states.</TSS>
              <Guidance>The evaluator shall ensure that guidance documentation contains a list of Compliant
                power saving states. If additional power saving states are supported, then the evaluator
                shall validate that the guidance documentation states how non-Compliant power states
                are disabled.</Guidance>
              <CustomEA name="KMD">There are no KMD evaluation activities for this SFR.</CustomEA>
              <Tests>The evaluator shall confirm that for each listed compliant state all key/key materials
                are removed from volatile memory by using the test defined in FCS_CKM.6.</Tests> 
              </aactivity></f-element>
          <audit-event/>
        </f-component>
        <f-component cc-id="fpt_pwr_ext.2" name="Timing of Power Saving States" id="fpt-pwr-ext-2-1">
          <consistency-rationale/>
          <comp-lev>describes the situations that cause Compliant power saving states to be entered.</comp-lev>
          <management/>
          <audit>The following actions should be auditable if FAU_GEN Security audit data generation is included in the PP/ST:<h:ul>
            <h:li>Transition of the TSF into different power saving states</h:li>
          </h:ul></audit>
          <dependencies>FPT_PWR_EXT.1 Power Saving States</dependencies>
          <f-element id="fpt-pwr-ext-2-1">
            <title>
              For each Compliant power saving state defined in FPT_PWR_EXT.1.1, the TSF shall enter the Compliant power saving state when the following conditions occur: user-initiated request, <selectables>
                <selectable>shutdown</selectable>
                <selectable>user inactivity</selectable>
                <selectable>request initiated by remote management system</selectable>
                <selectable><assignable>other conditions</assignable></selectable>
                <selectable>no other conditions</selectable>

              </selectables>.
            </title>
            <note role='application'><h:i>If volatile memory is not cleared as part of an unexpected power shutdown sequence then guidance documentation must define mitigation activities (e.g. how long users should wait after an unexpected power-down before volatile memory can be considered cleared).</h:i></note>
              <aactivity>
                <TSS>The evaluator shall validate that the TSS contains a list of conditions under which the
                  TOE enters a Compliant power saving state. </TSS>
                  <Guidance>The evaluator shall check that the guidance contains a list of conditions under which
                    the TOE enters a Compliant power saving state. Additionally, the evaluator shall verify
                    that the guidance documentation states whether unexpected power-loss events may
                    result in entry to a non-Compliant power saving state and, if that is the case, validate
                    that the documentation contains information on mitigation measures.</Guidance>
                  <CustomEA name="KMD">There are no KMD evaluation activities for this SFR.</CustomEA>
                  <Tests>The evaluator shall trigger each condition in the list of identified conditions and ensure
                    the TOE ends up in a compliant power saving state by running the test identified in
                    FCS_CKM.6.</Tests>
              </aactivity>
          </f-element>
          <audit-event/>
        </f-component>
        <f-component cc-id="fpt_tst_ext.1" name="TSF Testing" id="fpt-tst-ext-1" status="optional">
          <consistency-rationale/>
          <comp-lev>requires a suite of self-tests to be run during initial start-up in order to demonstrate correct operation of the TSF.</comp-lev>
          <management/>
          <audit>The following actions should be auditable if FAU_GEN Security audit data generation is included in the PP/ST:<h:ul>
            <h:li>Indication that TSF self-test was completed</h:li>
          </h:ul></audit>
          <dependencies/>
          <depends on-sel="fcs-rbg-ext-1-1-nist"/>

          <f-element id="fpt-tst-ext-1-1">
            <title>The TSF shall run a suite of the following self-tests <h:s><selectables><selectable>during initial start-up (on power on)</selectable><selectable>at the conditions [before the function is first invoked]</selectable></selectables></h:s> to demonstrate the correct operation of the TSF: <assignable> list of self-tests run by the TSF</assignable>.</title>
            <note role='application'><h:i><h:p>The tests regarding cryptographic functions implemented in the TOE can be deferred, as long as the tests are performed before the function is invoked.</h:p>
            <h:p>If FCS_RBG_EXT.1 is implemented by the TOE and according to NIST SP 800-90, the evaluator should verify that the TSS describes health tests that are consistent with section 11.3 of NIST SP 800-90.</h:p>
            <h:p>If any FCS_COP functions are implemented by the TOE, the TSS should describe the known answer self-tests for those functions.</h:p>
            <h:p>The evaluator is expected to verify that the TSS describes, for some set of non-cryptographic functions affecting the correct operation of the TSF, the method by which those functions are tested. The TSS will describe, for each of these functions, the method by which correct operation of the function/component is verified. The evaluator should determine that all of the identified functions/components are adequately tested on start-up.</h:p>
          </h:i></note>
          <aactivity>
              <TSS>
                <h:p>The evaluator shall verify that the TSS describes the known-answer self-tests for
                  cryptographic functions.</h:p>
                <h:p>The evaluator shall verify that the TSS describes, for some set of non-cryptographic
                  functions affecting the correct operation of the TOE and the method by which the TOE
                  tests those functions. The evaluator shall verify that the TSS includes each of these
                  functions, the method by which the TOE verifies the correct operation of the function.
                  The evaluator shall verify that the TSF data are appropriate for TSF Testing. For
                  example, more than blocks are tested for AES in CBC mode, output of AES in GCM
                  mode is tested without truncation, or 512-bit key is used for testing HMAC-SHA-512.
                  </h:p>
                <h:p>If FCS_RBG_EXT.1 is implemented by the TOE and according to NIST SP 800-90,
                  the evaluator shall verify that the TSS describes health tests that are consistent with
                  section 11.3 of NIST SP 800-90. </h:p>
                <h:p>If any FCS_COP functions are implemented by the TOE, the TSS shall describe the
                  known-answer self-tests for those functions.</h:p>
                <h:p>The evaluator shall verify that the TSS describes, for some set of non-cryptographic
                  functions affecting the correct operation of the TSF, the method by which those
                  functions are tested. The TSS will describe, for each of these functions, the method by
                  which correct operation of the function/component is verified. The evaluator shall
                  determine that all of the identified functions/components are adequately tested on startup.</h:p>
              </TSS>
              <Guidance>There are no AGD evaluation activities for this SFR.</Guidance>
              <CustomEA name="KMD">There are no KMD evaluation activities for this SFR</CustomEA>
              <Tests>There are no test evaluation activities for this SFR.</Tests>
          </aactivity>
          </f-element>
          <audit-event/>
        </f-component>

        <f-component cc-id="fpt_tud_ext.1" name="Trusted Update" id="fpt-tud-ext-1">
          <consistency-rationale/>
          <comp-lev>requires the capability to be provided to update the TOE firmware and software, including the ability to verify the updates prior to installation.</comp-lev>
          <management>The following actions could be considered for the management functions in FMT:<h:ul>
            <h:li>Ability to update the TOE and to verify the updates</h:li>
          </h:ul></management>
          <audit>The following actions should be auditable if FAU_GEN Security audit data generation is included in the PP/ST: <h:ul>
            <h:li>Initiation of the update process</h:li>
            <h:li></h:li>
          </h:ul>Any failure to verify the integrity of the update</audit>
          <dependencies><h:p>FCS_COP.1/SigVer Cryptographic Operation (Signature Verification),</h:p>
          <h:p>FCS_COP.1/Hash Cryptographic Operation (Hash Algorithm)</h:p></dependencies>
          
          <f-element id="fpt-tud-ext-1-1">
            <title>
              <h:b>Refinement:</h:b> The TSF shall provide [<h:i>authorized users</h:i>] the ability to
              query the current version of the TOE 
              <h:i><h:b>
                <selectables>
                  <selectable>software</selectable>
                  <selectable>firmware</selectable>
                </selectables></h:b></h:i>
                <h:s> software/firmware</h:s>.
            </title>
              <aactivity><no-tests/></aactivity>
          </f-element>
          <f-element id="fpt-tud-ext-1-2">
            <title>
              <h:b>Refinement:</h:b> The TSF shall provide [<h:i>authorized users</h:i>] the ability to initiate updates to TOE <h:i><h:b>
                <selectables>
                  <selectable>software</selectable>
                  <selectable>firmware</selectable>
                </selectables></h:b></h:i> <h:s>software/firmware</h:s>.
            </title>
              <aactivity><no-tests/></aactivity>
          </f-element>
          <f-element id="fpt-tud-ext-1-3">
            <title>
              <h:b>Refinement:</h:b> The TSF shall verify updates to the TOE software using a [<h:i>digital signature <h:b>as specified in FCS_COP.1/SigVer</h:b></h:i>] by the manufacturer prior to installing those updates.
            </title>
            <note role='application'><h:i>While this component requires the TOE to implement the update functionality itself, it is acceptable to perform the cryptographic checks using functionality available in the Operational Environment.</h:i></note>
              <aactivity>
                <TSS>
                  <h:p>The evaluator shall examine the TSS to ensure that it describes information stating that
                    an authorized source signs TOE updates and will have an associated digital signature.
                    The evaluator shall examine the TSS contains a definition of an authorized source along
                    with a description of how the TOE uses public keys for the update verification
                    mechanism in the Operational Environment. The evaluator ensures the TSS contains
                    details on the protection and maintenance of the TOE update credentials.</h:p>
                    <h:p>If the Operational Environment performs the signature verification, then the evaluator
                      shall examine the TSS to ensure it describes, for each platform identified in the ST, the
                      interface(s) used by the TOE to invoke this cryptographic functionality.</h:p></TSS>
                  <Guidance>
                    <h:p>The evaluator ensures that the operational guidance describes how the TOE obtains
                      vendor updates to the TOE; the processing associated with verifying the digital
                      signature of the updates (as defined in FCS_COP.1/SigVer); and the actions that take place
                      for successful and unsuccessful cases.</h:p></Guidance>
                  <CustomEA name="KMD">There are no KMD evaluation activities for this SFR.</CustomEA>
                  <Tests>
                    <h:p>
                    The evaluators shall perform the following tests (if the TOE supports multiple
                    signatures, each using a different hash algorithm, then the evaluator performs tests for
                    different combinations of authentic and unauthentic digital signatures and hashes, as
                    well as for digital signature alone): </h:p>
                    <testlist>
                      <test>The evaluator performs the version verification activity to determine the current
                        version of the TOE. After the update tests described in the following tests, the evaluator
                        performs this activity again to verify that the version correctly corresponds to that of
                        the update.</test>
                      <test>The evaluator performs the version verification activity to determine the current
                        version of the TOE. After the update tests described in the following tests, the evaluator
                        performs this activity again to verify that the version correctly corresponds to that of
                        the update.</test>
                    </testlist> </Tests>
              </aactivity>
          </f-element>
          <audit-event/>
        </f-component>

      </section>

	</sec:SFRs>
  <section title="Security Assurance Requirements" id="SARs">
    <h:p>This cPP identifies the Security Assurance Requirements (SARs) to frame the extent to which the evaluator assesses the documentation applicable for the evaluation and performs independent testing. Individual Evaluation Activities to be performed are specified in <h:i>Supporting Document (Mandatory Technical Document) Full Drive Encryption: Authorization Acquisition, February 2019</h:i>.
  </h:p><h:p>
    <h:b>Note to ST authors: There is a selection in the ASE_TSS that must be completed. One cannot simply reference the SARs in this cPP.</h:b>
  </h:p><h:p>
    The general model for evaluation of TOEs against STs written to conform to this cPP is as follows: after the ST has been approved for evaluation, the ITSEF will obtain the TOE, supporting environmental IT (if required), and the administrative/user guides for the TOE. The ITSEF is expected to perform actions mandated by the Common Evaluation Methodology (CEM) for the ASE and ALC SARs. The ITSEF also performs the Evaluation Activities contained within the SD, which are intended to be an interpretation of the other CEM assurance requirements as they apply to the specific technology instantiated in the TOE. The Evaluation Activities that are captured in the SD also provide clarification as to what the developer needs to provide to demonstrate the TOE is compliant with the cPP.
  </h:p>
  <h:p>
    
    <h:table>
      <h:head><h:b><ctr ctr-type="Table" pre="Table" id="toe-sec">: TOE Security Assurance Requirements</ctr></h:b></h:head>
      <h:tr>
     <h:td><h:b>Functional Class</h:b></h:td>
     <h:td><h:b>Functional Components</h:b></h:td>
    
    </h:tr>
    <h:tr>
     <h:td rowspan="7">Security Target (ASE)</h:td>
     <h:td>Conformance Claims (ASE_CCL.1)</h:td>
    
    </h:tr>
    <h:tr>
     
     <h:td>Extended Components Definition (ASE_ECD.1)</h:td>
    </h:tr>
    <h:tr>
     <h:td>ST Introduction (ASE_INT.1)</h:td>
    </h:tr>
    <h:tr>
      <h:td>Security Objectives for the Operational Environment (ASE_OBJ.1)</h:td>
     </h:tr>
     <h:tr>
      <h:td>Stated Security Requirements (ASE_REQ.1)</h:td>
     </h:tr>
     <h:tr>
      <h:td>Security Problem Definition (ASE_SPD.1)</h:td>
     </h:tr>
     <h:tr>
      <h:td>TOE Summary Specification (ASE_TSS.1)</h:td>
     </h:tr>
     <h:tr>
      <h:td>Development (ADV)</h:td>
      <h:td>Basic Functional Specification (ADV_FSP.1)</h:td>
     </h:tr>
     <h:tr>
      <h:td rowspan="2">Guidance Documents (AGD)</h:td>
      <h:td>Operational User Guidance (AGD_OPE.1)</h:td>
     </h:tr>
     <h:tr>
      <h:td>Preparative Procedures (AGD_PRE.1)</h:td>
     </h:tr>
     <h:tr>
      <h:td rowspan="2">Life Cycle Support (ALC)</h:td>
      <h:td>Labeling of the TOE (ALC_CMC.1)</h:td>
     </h:tr>
     <h:tr>
      <h:td>TOE CM Coverage (ALC_CMS.1)</h:td>
     </h:tr>
     <h:tr>
      <h:td>Tests (ATE)</h:td>
      <h:td>Independent Testing – Sample (ATE_IND.1)</h:td>
     </h:tr>
     <h:tr>
      <h:td>Vulnerability Assessment (AVA)</h:td>
      <h:td>Vulnerability Survey (AVA_VAN.1)</h:td>
     </h:tr>
   </h:table>
  </h:p>
    <section title="ASE: Security Target" id="ase">
      <h:p>The ST is evaluated as per ASE activities defined in the CEM. In addition, there may be Evaluation Activities specified within the SD that call for necessary descriptions to be included in the TSS that are specific to the TOE technology type.</h:p>
      <h:p>The SFRs in this cPP allow for conformant implementations to incorporate a wide range of acceptable key management approaches as long as basic principles are satisfied. Given the criticality of the key management scheme, this cPP requires the developer to provide a detailed description of their key management implementation. This information can be submitted as an appendix to the ST and marked proprietary, as this level of detailed information is not expected to be made publicly available. See Appendix E for details on the expectation of the developer’s Key Management Description</h:p><h:p>In addition, if the TOE includes a random bit generator Appendix D provides a description of the information expected to be provided regarding the quality of the entropy.</h:p>
      <h:p>
        <h:b>ASE_TSS.1.1C Refinement:</h:b> The TOE summary specification shall describe how the TOE meets each SFR, <h:b>including a proprietary Key Management Description (Appendix E), and <h:i>[selection: Entropy Essay, list of all of 3rd 9 party software libraries (including version numbers), 3rd 10 party hardware components (including model/version numbers), no other cPP specified proprietary documentation]</h:i>.</h:b>
      
    </h:p></section>
    <section title="ADV: Development" id="adv">
      The design information about the TOE is contained in the guidance documentation available to the end user as well as the TSS portion of the ST, and any additional information required by this cPP that is not to be made public (e.g., Entropy Essay) .
   
    <a-component cc-id="adv_fsp.1" name="Basic Functional Specification (ADV_FSP.1)">
      <h:p>The functional specification describes the TOE Security Functions Interfaces (TSFIs). It is not necessary to have a formal or complete specification of these interfaces. Additionally, because TOEs conforming to this cPP will may interfaces to the Operational Environment that are not directly invoked by TOE users, there is little point specifying that such interfaces be described in and of themselves since only indirect testing of such interfaces may be possible. For this cPP, the Evaluation Activities for this family focus on understanding the interfaces presented in the TSS in response to the functional requirements and the interfaces presented in the AGD documentation. No additional “functional specification” documentation is necessary to satisfy the Evaluation Activities specified in the SD.</h:p>
      <h:p>The Evaluation Activities in the SD are associated with the applicable SFRs; since these are directly associated with the SFRs, the tracing in element ADV_FSP.1.2D is implicitly already done and no additional documentation is necessary.</h:p>
    </a-component>
  </section>
  <section title="AGD: Guidance Documentation" id="agd">
    <h:p>The guidance documents will be provided with the ST. Guidance must include a description of how the IT personnel verifies that the Operational Environment can fulfill its role for the security functionality. The documentation should be in an informal style and readable by the IT personnel.</h:p>
    <h:p>Guidance must be provided for every operational environment that the product supports as claimed in the ST. This guidance includes: <h:ul>
      <h:li>instructions to successfully install the TSF in that environment; and</h:li>
      <h:li>instructions to manage the security of the TSF as a product and as a component of the larger operational environment; and</h:li>
      <h:li>Instructions to provide a protected administrative capability.</h:li>
    </h:ul></h:p><h:p>Guidance pertaining to particular security functionality must also be provided; requirements on such guidance are contained in the Evaluation Activities specified in the SD.</h:p>
    <a-component cc-id="agd_ope.1" name="Operational User Guidance (AGD_OPE.1)">
      <h:p>The operational user guidance does not have to be contained in a single document. Guidance to users, administrators, and integrators can be spread among documents or web pages.</h:p>
      <h:p>The developer should review the Evaluation Activities contained in the SD to ascertain the specifics of the guidance that the evaluator will be checking for. This will provide the necessary information for the preparation of acceptable guidance.</h:p>
    </a-component>
    <a-component cc-id="agd_pre.1" name="Preparative Procedures (AGD_PRE.1)">As with the operational guidance, the developer should look to the Evaluation Activities to determine the required content with respect to preparative procedures.</a-component>
  </section>
  <section title="Class ALC: Life-cycle Support" id="alc">
    At the assurance level provided for TOEs conformant to this cPP, life-cycle support is limited to end-user-visible aspects of the life-cycle, rather than an examination of the TOE vendor’s development and configuration management process. This is not meant to diminish the critical role that a developer’s practices play in contributing to the overall trustworthiness of a product; rather, it is a reflection on the information to be made available for evaluation at this assurance level.
    <a-component cc-id="alc_cmc.1" name="Labelling of the TOE (ALC_CMC.1)">
      This component is targeted at identifying the TOE such that it can be distinguished from other products or versions from the same vendor and can be easily specified when being procured by an end user. The evaluator performs the CEM work units associated with ALC_CMC.1.
    </a-component>
    <a-component cc-id="alc_cms.1" name="TOE CMS Coverage (ALC_CMS.1)">
      Given the scope of the TOE and its associated evaluation evidence requirements, the evaluator performs the CEM work units associated with ALC_CMS.1.
    </a-component>
  </section>
  <section id="class-ate" title="Class ATE: Tests">
    Testing is specified for functional aspects of the system as well as aspects that take advantage of design or implementation weaknesses. The former is done through the ATE_IND family, while the latter is through the AVA_VAN family. For this cPP, testing is based on advertised functionality and interfaces with dependency on the availability of design information. One of the primary outputs of the evaluation process is the test report as specified in the following requirements.
    <a-component cc-id="ate_ind.1" name="Independent Testing – Conformance (ATE_IND.1)">
      Testing is performed to confirm the functionality described in the TSS as well as the operational guidance (includes “evaluated configuration” instructions). The focus of the testing is to confirm that the requirements specified in Section 5 are being met. The Evaluation Activities in the SD identify the specific testing activities necessary to verify compliance with the SFRs. The evaluator produces a test report documenting the plan for and results of testing, as well as coverage arguments focused on the platform/TOE combinations that are claiming conformance to this cPP.
    </a-component>

  </section>
  <section id="class-ava" title="Class AVA: Vulnerability Assessment">
    For the current generation of this cPP, the iTC is expected to survey open sources to discover what vulnerabilities have been discovered in these types of products and provide that content into the AVA_VAN discussion. In most cases, these vulnerabilities will require sophistication beyond that of a basic attacker. This information will be used in the development of future Protection Profiles.
    <a-component cc-id="ava_van.1" name="Vulnerability Survey (AVA_VAN.1)">
      Appendix A<comment>Should we get rid of the referenced Appendix since it does not exist?</comment> in the companion Supporting Document provides a guide to the evaluator in performing a vulnerability analysis.
    </a-component>
  </section>
  </section>
  
</sec:Security_Requirements>   
<!-- Appendix A includes optional, objective, and implementation-dependent requirements -->
<!-- Appendix B is selection-based requirements -->
<!-- Appendix C: Extended Component Definitions -->
<appendix id="apndx-entropy" title="Entropy Documentation and Assessment">
  <h:p><h:i>This is an optional appendix in the cPP, and only applies if the TOE is providing deterministic random bit generation services, e.g. the ST claims FCS_RBG_EXT.1.</h:i></h:p>
  <h:p>This appendix describes the required supplementary information for each entropy source used by the TOE.</h:p>
  <h:p>The documentation of the entropy source(s) should be detailed enough that, after reading, the evaluator will thoroughly understand the entropy source and why it can be relied upon to provide sufficient entropy. This documentation should include multiple detailed sections: design description, entropy justification, operating conditions, and health testing. This documentation is not required to be part of the TSS in the public facing ST. 
    </h:p>
    <section id="sec-ent-design" title="Design Description">
      <h:p>Documentation shall include the design of each entropy source as a whole, including the interaction of all entropy source components. Any information that can be shared regarding the design should also be included for any third-party entropy sources that are included in the product. </h:p>
      <h:p>The documentation will describe the operation of the entropy source to include how entropy is produced, and how unprocessed (raw) data can be obtained from within the entropy source for testing purposes. The documentation should walk through the entropy source design indicating where the entropy comes from, where the entropy output is passed next, any post-processing of the raw outputs (hash, XOR, etc.), if/where it is stored, and finally, how it is output from the entropy source. Any conditions placed on the process (e.g., blocking) should also be described in the entropy source design. Diagrams and examples are encouraged.</h:p>
      <h:p>This design must also include a description of the content of the security boundary of the entropy source and a description of how the security boundary ensures that an adversary outside the boundary cannot affect the entropy rate.</h:p>
      <h:p>If implemented, the design description shall include a description of how third-party applications can add entropy to the RBG. A description of any RBG state saving between power-off and power-on shall be included.</h:p>
    </section>
    <section id="sec-ent-justification" title="Entropy Justification">
      <h:p>There should be a technical argument for where the unpredictability in the source comes from and why there is confidence in the entropy source delivering sufficient entropy for the uses made of the RBG output (by this particular TOE). This argument will include a description of the expected min-entropy rate (i.e. the minimum entropy (in bits) per bit or byte of source data) and explain that sufficient entropy is going into the TOE randomizer seeding process. This discussion will be part of a justification for why the entropy source can be relied upon to produce bits with entropy.</h:p>
      <h:p>The amount of information necessary to justify the expected min-entropy rate depends on the type of entropy source included in the product.</h:p>
      <h:p>For developer provided entropy sources, in order to justify the min-entropy rate, it is expected that a large number of raw source bits will be collected, statistical tests will be performed, and the min-entropy rate determined from the statistical tests. While no particular statistical tests are required at this time, it is expected that some testing is necessary in order to determine the amount of min-entropy in each output. </h:p>
      <h:p>For third party provided entropy sources, in which the TOE vendor has limited access to the design and raw entropy data of the source, the documentation will indicate an estimate of the amount of min-entropy obtained from this third-party source. It is acceptable for the vendor to “assume” an amount of min-entropy, however, this assumption must be clearly stated in the documentation provided. In particular, the min-entropy estimate must be specified and the assumption included in the ST.</h:p>
      <h:p>Regardless of type of entropy source, the justification will also include how the DRBG is initialized with the entropy stated in the ST, for example by verifying that the min-entropy rate is multiplied by the amount of source data used to seed the DRBG or that the rate of entropy expected based on the amount of source data is explicitly stated and compared to the statistical rate. If the amount of source data used to seed the DRBG is not clear or the calculated rate is not explicitly related to the seed, the documentation will not be considered complete.</h:p>
      <h:p>The entropy justification shall not include any data added from any third-party application or from any state saving between restarts.</h:p>
    </section>
    <section id="sec-ent-oc" title="Operating Conditions">The entropy rate may be affected by conditions outside the control of the entropy source itself. For example, voltage, frequency, temperature, and elapsed time after power-on are just a few of the factors that may affect the operation of the entropy source. As such, documentation will also include the range of operating conditions under which the entropy source is expected to generate random data. Similarly, documentation shall describe the conditions under which the entropy source is no longer guaranteed to provide sufficient entropy. Methods used to detect failure or degradation of the source shall be included.</section>
    <section id="s-ent-health" title="Health Testing">More specifically, all entropy source health tests and their rationale will be documented. This will include a description of the health tests, the rate and conditions under which each health test is performed (e.g., at startup, continuously, or on-demand), the expected results for each health test, TOE behavior upon entropy source failure, and rationale indicating why each test is believed to be appropriate for detecting one or more failures in the entropy source.</section>
</appendix>
<appendix id="apndx-keyMan" title="Key Management Description">
  <h:p>The documentation of the product’s encryption key management should be detailed enough that, after reading, the evaluator will thoroughly understand the product’s key management and how it meets the requirements to ensure the keys are adequately protected. This documentation should include an essay and diagram(s). This documentation is not required to be part of the TSS - it can be submitted as a separate document and marked as developer proprietary.</h:p>
  <h:p>Essay:</h:p>
  <h:p>The essay will provide the following information for all keys in the key chain:</h:p>
  <h:p><h:ul>
    <h:li>The purpose of the key</h:li>
    <h:li>If the key is stored in non-volatile memory</h:li>
    <h:li>How and when the key is protected</h:li>
    <h:li>How and when the key is derived</h:li>
    <h:li>The strength of the key</h:li>
    <h:li>When or if the key would be no longer needed, along with a justification.</h:li>
  </h:ul>The essay will also describe the following topics:</h:p>
  <h:p><h:ul>
    <h:li>A description of all authorization factors that are supported by the product and how each factor is handled, including any conditioning and combining performed.</h:li>
    <h:li>If validation is supported, the process for validation shall be described, noting what value is used for validation and the process used to perform the validation. It shall describe how this process ensures no keys in the key chain are weakened or exposed by this process.</h:li>
    <h:li>The authorization process that leads to the ultimate release of the BEV. This section shall detail the key chain used by the product. It shall describe which keys are used in the protection of the BEV and how they meet the derivation, key wrap, or a combination of the two requirements, including the direct chain from the initial authorization to the BEV. It shall also include any values that add into that key chain or interact with the key chain and the protections that ensure those values do not weaken or expose the overall strength of the key chain.</h:li>
    <h:li>The diagram and essay will clearly illustrate the key hierarchy to ensure that at no point the chain could be broken without a cryptographic exhaust or all of the initial authorization values and the effective strength of the BEV is maintained throughout the Key Chain. 
      </h:li>
    <h:li>A description of the data encryption engine, its components, and details about its implementation (e.g. for hardware: integrated within the device’s main SOC or separate co-processor, for software: initialization of the product, drivers, libraries (if applicable), logical interfaces for encryption/decryption, and areas which are not encrypted (e.g. boot loaders, portions associated with the Master Boot Record (MBRs), partition tables, etc.)). The description should also include the data flow from the device’s host interface to the device’s persistent media storing the data, information on those conditions in which the data bypasses the data encryption engine (e.g. read-write operations to an unencrypted Master Boot Record area). The description should be detailed enough to verify all platforms to ensure that when the user enables encryption, the product encrypts all hard storage devices. It should also describe the platform’s boot initialization, the encryption initialization process, and at what moment the product enables the encryption.</h:li>
    <h:li>The process for destroying keys when they are no longer needed by describing the storage location of all keys and the protection of all keys stored in non-volatile memory.</h:li>

  </h:ul></h:p>
  <h:p>Diagram:
  </h:p>
  <h:p>
    <h:ul>
      <h:li>The diagram will include all keys from the initial authorization factor(s) to the BEV and any keys or values that contribute into the chain. It must list the cryptographic strength of each key and indicate how each key along the chain is protected with either Key Derivation or Key Wrapping (from the allowed options). The diagram should indicate the input used to derive or unwrap each key in the chain.</h:li>
      <h:li>A functional (block) diagram showing the main components (such as memories and processors) and the data path between, for hardware, the device’s host interface and the device’s persistent media storing the data, or for software, the initial steps needed for the activities the TOE performs to ensure it encrypts the storage device entirely when a user or administrator first provisions the product. The hardware encryption diagram shall show the location of the data encryption engine within the data path.</h:li>
      <h:li>The hardware encryption diagram shall show the location of the data encryption engine within the data path. The evaluator shall validate that the hardware encryption diagram contains enough detail showing the main components within the data path and that it clearly identifies the data encryption engine. </h:li>
    </h:ul>
  </h:p>

</appendix>
<!-- Appendix D: Implicity Satisfied Requirements -->
<!-- Appendix G: Use-Case Templates -->
<!-- Appendix H: Acronyms -->
<!-- Appendix I: Bibliography -->

<bibliography>
<!--	  <cc-entry/>   -->
      <entry id="bibOMB">
        <tag>OMB</tag>
        <description>
          <h:a href="http://www.whitehouse.gov/sites/default/files/omb/memoranda/fy2006/m06-19.pdf"
            >Reporting Incidents Involving Personally Identifiable Information and Incorporating the
            Cost for Security in Agency Information Technology Investments</h:a>, OMB M-06-19, July
          12, 2006. </description>
      </entry>
 </bibliography>

</PP>
